import { HEIGHT, PERSON_GAP, PERSON_RADIUS, PERSON_SPEED, sicknessInterval, WIDTH } from './constants';
import { Health } from './health.enum';
import { Vector2D } from './vector2d';
var Person = /** @class */ (function () {
    function Person(health, randomNumberGenerator) {
        this.health = health;
        this.positionDiff = new Vector2D(0, 0);
        this.rng = randomNumberGenerator || Math.random;
        this.position = Vector2D.random(this.rng);
        this.position.x *= WIDTH;
        this.position.y *= HEIGHT;
        this.velocity = Person.applySpeed(Vector2D.random(this.rng).sub(new Vector2D(0.5, 0.5)));
        this.socialDistancing = false;
        this.timeToRecovery = Math.floor(sicknessInterval.from + this.rng() * (sicknessInterval.to - sicknessInterval.from));
    }
    Person.applySpeed = function (velocity) {
        return velocity.normalize().mult(PERSON_SPEED);
    };
    Person.reflectBall = function (ball, direction, distanceDiff) {
        direction.normalize();
        // move the ball outside of collision
        var diff = distanceDiff + PERSON_GAP / 2;
        ball.position = ball.position.add(direction.mult(diff));
        direction.normalize();
        // reflect ball, solution: r=dâˆ’2(d*n)n (https://math.stackexchange.com/questions/13261/how-to-get-a-reflection-vector)
        ball.velocity = ball.velocity.sub(direction.mult(2 * ball.velocity.dot(direction)));
    };
    Person.separateBalls = function (ballA, ballB, positionSub, distanceDiff) {
        // move balls outside of collision
        var diff = distanceDiff / 2 + PERSON_GAP;
        var adjustment = positionSub.normalize().mult(diff);
        ballA.position = ballA.position.add(adjustment);
        ballB.position = ballB.position.add(adjustment.negate());
        positionSub.normalize();
    };
    Person.ellasticCollision = function (ballA, ballB, direction, distance) {
        // Elastic collision, but the ball speed is reverted after the collision (no energy lost in this case)
        // The formula can be found here: https://en.wikipedia.org/wiki/Elastic_collision
        var adjustment = direction.mult(ballA.velocity.sub(ballB.velocity).dot(direction) / (distance * distance));
        ballA.velocity = Person.applySpeed(ballA.velocity.sub(adjustment));
        ballB.velocity = Person.applySpeed(ballB.velocity.sub(adjustment.negate()));
    };
    Person.borderCollision = function (border, ball) {
        if (!border.closed) {
            return;
        }
        if (border.ballLeftPosition <= ball.position.x && border.ballRightPosition >= ball.position.x) {
            // move ball outside the border
            ball.position.x = (ball.position.x <= border.position) ?
                border.ballLeftPosition : border.ballRightPosition;
            // reflect ball
            ball.velocity.x = -ball.velocity.x;
        }
    };
    Person.prototype.canvasBoundariesCollision = function () {
        if (this.position.x <= Person.LEFT_BOUNDARY || this.position.x >= Person.RIGHT_BOUNDARY) {
            // move ball inside the boundaries
            this.position.x = (this.position.x <= Person.LEFT_BOUNDARY) ?
                Person.LEFT_BOUNDARY : Person.RIGHT_BOUNDARY;
            // reflection ball
            this.velocity.x = -this.velocity.x;
        }
        if (this.position.y <= Person.TOP_BOUNDARY || this.position.y >= Person.BOTTOM_BOUNDARY) {
            // move ball inside the borders
            this.position.y = (this.position.y <= Person.TOP_BOUNDARY) ?
                Person.TOP_BOUNDARY : Person.BOTTOM_BOUNDARY;
            // reflection ball
            this.velocity.y = -this.velocity.y;
        }
    };
    Person.prototype.bordersCollision = function (leftBorder, rightBorder) {
        Person.borderCollision(leftBorder, this);
        Person.borderCollision(rightBorder, this);
    };
    Person.prototype.ballsCollision = function (ball, infectionRate) {
        if (this.health === Health.DEAD || ball.health === Health.DEAD) {
            return;
        }
        this.positionDiff.set(this.position);
        this.positionDiff.sub(ball.position);
        var distance = this.positionDiff.length();
        var distanceDiff = (2 * PERSON_RADIUS) - distance; // 2* ballradius === minDistance
        if (distanceDiff >= 0) {
            if (this.socialDistancing) {
                Person.reflectBall(ball, this.positionDiff.negate(), distanceDiff);
            }
            else if (ball.socialDistancing) {
                Person.reflectBall(this, this.positionDiff, distanceDiff);
            }
            else {
                Person.separateBalls(this, ball, this.positionDiff, distanceDiff);
                if (!ball.socialDistancing || !this.socialDistancing) {
                    Person.ellasticCollision(this, ball, this.positionDiff, distance);
                }
            }
            if ((this.health === Health.SICK || ball.health === Health.SICK) &&
                (this.health === Health.HEALTHY || ball.health === Health.HEALTHY) &&
                (this.rng() < infectionRate)) {
                this.health = ball.health = Health.SICK;
            } // both will be sick if at least one is infected in the collision
        }
    };
    Person.prototype.move = function () {
        if (!this.socialDistancing && this.health !== Health.DEAD) 
        // move the ball using velocities if not social distancing or dead
        {
            this.position = this.position.add(this.velocity);
        }
    };
    Person.prototype.checkHealth = function (deathRate) {
        if (this.health === Health.SICK && (--this.timeToRecovery) === 0) 
        // check if this ball is dead or recovered
        {
            this.health = (this.rng() < deathRate) ? Health.DEAD : Health.RECOVERED;
        }
    };
    Person.LEFT_BOUNDARY = PERSON_RADIUS;
    Person.RIGHT_BOUNDARY = WIDTH - PERSON_RADIUS;
    Person.TOP_BOUNDARY = PERSON_RADIUS;
    Person.BOTTOM_BOUNDARY = HEIGHT - PERSON_RADIUS;
    return Person;
}());
export { Person };
//# sourceMappingURL=data:application/json;base64,