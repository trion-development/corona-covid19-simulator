{"version":3,"file":"pandemic-simulator-lib.umd.js","sources":["ng://pandemic-simulator-lib/lib/models/health.enum.ts","ng://pandemic-simulator-lib/lib/models/constants.ts","ng://pandemic-simulator-lib/lib/chart/chart.component.ts","ng://pandemic-simulator-lib/lib/chart/chart.component.html","ng://pandemic-simulator-lib/lib/params/params.component.ts","ng://pandemic-simulator-lib/lib/params/params.component.html","ng://pandemic-simulator-lib/lib/models/vector2d.ts","ng://pandemic-simulator-lib/lib/models/person.ts","ng://pandemic-simulator-lib/lib/simulation/simulation.component.ts","ng://pandemic-simulator-lib/lib/simulation/simulation.component.html","ng://pandemic-simulator-lib/lib/simulator.component.html","ng://pandemic-simulator-lib/lib/simulator.component.ts","ng://pandemic-simulator-lib/lib/pandemic-simulator-lib.module.ts"],"sourcesContent":["export enum Health {\n  SICK,\n  HEALTHY,\n  RECOVERED,\n  DEAD\n}\n","import { Border } from './border';\nimport { Health } from './health.enum';\n\nexport const fps = 60; // Note: if you change this, you'll need to addapt ball speed\nexport const updateIntervallMs = 1000 / fps;\nexport const simulationSeconds = 30; // the simulation lasts 30 seconds\nexport const TOTAL_FRAMES = fps * simulationSeconds;\nexport const safeLimitPercentage = 0.3; // that's 30 percents capacity\nexport const chartSafeLimit = 1 - safeLimitPercentage;\n\n// loval units\nexport const WIDTH = 100;\nexport const HEIGHT = 100 * 2 / 3; // the canvas ratio is always 3:2\nexport const PERSON_RADIUS = 0.8;\nexport const PERSON_SPEED = 0.2;\nexport const PERSON_GAP = 0.001; // a small value used to create gaps between balls\nexport const FULL_ANGLE = 2 * Math.PI;\nexport const borderWidth = 1;\n\nexport const oneThirdWidth = WIDTH / 3;\nexport const twoThirdsWidth = 2 * oneThirdWidth;\nexport const borderWidthHalf = borderWidth / 2;\n\n// colors\nexport const blackColor = '#000000';\nexport const lightGrayColor = '#EEEEEE';\nexport const healthyColor = '#a6db68';\nexport const sickColor = '#E53935';\nexport const recoveredColor = '#69a7db';\nexport const dangerSickColor = '#B71C1C';\n\nexport const colors = {\n  border: {\n    opened: lightGrayColor,\n    closed: blackColor\n  },\n  states: {\n    [Health.HEALTHY]: healthyColor,\n    [Health.SICK]: sickColor,\n    [Health.RECOVERED]: recoveredColor,\n    [Health.DEAD]: blackColor\n  },\n  chart: {\n    healthy: healthyColor,\n    safeSick: sickColor,\n    dangerSick: dangerSickColor,\n    recovered: recoveredColor,\n    dead: blackColor,\n    empty: lightGrayColor,\n    safeLine: lightGrayColor\n  },\n  canvasBoundary: blackColor\n};\n\n\nexport const INFECTION_RATE = 1;\nexport const DEATH_RATE = 0.03;\n\nexport const sicknessInterval = {\n  from: 6 * fps,\n  to: 8 * fps\n};\n","import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';\nimport { chartSafeLimit, colors, TOTAL_FRAMES } from '../models/constants';\nimport { Health } from '../models/health.enum';\n\n@Component({\n  selector: 'cosi-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.scss']\n})\nexport class ChartComponent implements AfterViewInit {\n\n  @ViewChild('canvasElement') chartCanvas: ElementRef<HTMLCanvasElement>;\n  @ViewChild('container') containerElement: ElementRef<HTMLElement>;\n\n  deadAbsolute: number;\n  recoveredAbsolute: number;\n  sickAbsolute: number;\n  healthyAbsolute: number;\n\n  private currentStep: number;\n  private dangerSick: number[];\n  // private safeSick: number[];\n  private healthy: number[];\n  private recovered: number[];\n  private context: CanvasRenderingContext2D;\n  private maxValue: number;\n\n  constructor(private cdRef: ChangeDetectorRef) {\n  }\n\n  ngAfterViewInit(): void {\n    const ctx = this.chartCanvas.nativeElement.getContext('2d');\n    if (ctx) {\n      this.context = ctx;\n    }\n  }\n\n  init(value: number): void {\n    // init parameters\n    this.maxValue = value;\n  }\n\n  start(): void {\n    // clean chart states\n    this.dangerSick = [];\n    // this.safeSick = [];\n    this.healthy = [];\n    this.recovered = [];\n    this.currentStep = 0;\n  }\n\n  update(data: { [K in Health]: number }): void {\n    // save the values as percentages\n    this.deadAbsolute = data[Health.DEAD];\n    this.recoveredAbsolute = data[Health.RECOVERED];\n    this.sickAbsolute = data[Health.SICK];\n    this.healthyAbsolute = data[Health.HEALTHY];\n    this.cdRef.detectChanges();\n\n    let sickValue = this.maxValue - data[Health.SICK];\n    let healthyValue = sickValue - data[Health.HEALTHY];\n    let recoveredValue = healthyValue - data[Health.RECOVERED];\n    sickValue /= this.maxValue;\n    healthyValue /= this.maxValue;\n    recoveredValue /= this.maxValue;\n\n    this.dangerSick.push(sickValue);\n    // this.safeSick.push(Math.max(sickValue, chartSafeLimit));\n    this.healthy.push(healthyValue);\n    this.recovered.push(recoveredValue);\n  }\n\n  draw(): void {\n    // The chart canvas width and height can be found using offsetWidth and offsetHeight\n    const width = this.containerElement.nativeElement.offsetWidth;\n    const height = this.containerElement.nativeElement.offsetHeight;\n    const stepSize = width / (TOTAL_FRAMES - 1); // minus the first frame/result, because that's the start of the chart\n    const currentStepSize = this.currentStep * stepSize;\n\n    // update dimensions and clear canvas\n    // the canvas is cleared when a new value is attached to dimensions (no matter if a same value)\n    this.chartCanvas.nativeElement.width = width;\n    this.chartCanvas.nativeElement.height = height;\n\n    // draw empty rect (the upcoming time)\n    this.drawRect(colors.chart.empty, currentStepSize, 0, width - currentStepSize, height);\n\n    // draw dead part (a whole rectangle, the elapsed time)\n    this.drawRect(colors.chart.dead, 0, 0, currentStepSize, height);\n\n    // draw recovered part\n    this.drawPolygon(this.recovered, colors.chart.recovered, height, stepSize);\n\n    // draw healthy part\n    this.drawPolygon(this.healthy, colors.chart.healthy, height, stepSize);\n\n    // draw danger sick part\n    this.drawPolygon(this.dangerSick, colors.chart.dangerSick, height, stepSize);\n\n    // draw \"safe\" sick part\n    // this.drawPolygon(this.safeSick, colors.chart.safeSick, height, stepSize);\n\n    // draw \"safe\" line\n    // this.drawLine(height * chartSafeLimit, 0, currentStepSize);\n\n    this.currentStep++;\n  }\n\n  private drawLine(height: number, from: number, to: number): void {\n    this.context.beginPath();\n    this.context.moveTo(from, height);\n    this.context.lineTo(to, height);\n    this.context.closePath();\n\n    this.context.strokeStyle = colors.chart.safeLine;\n    this.context.stroke();\n  }\n\n  private drawRect(color: string, x: number, y: number, width: number, height: number): void {\n    this.context.fillStyle = color;\n    this.context.fillRect(x, y, width, height);\n  }\n\n  private drawPolygon(data: number[], color: string, height: number, stepSize: number): void {\n    this.context.beginPath();\n    this.context.moveTo(0, height);\n\n    let step = -stepSize;\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < data.length; i++) {\n      step += stepSize;\n      this.context.lineTo(step, data[i] * height);\n    }\n\n    this.context.lineTo(step, height);\n    this.context.closePath();\n\n    this.context.fillStyle = color;\n    this.context.fill();\n  }\n\n  private clear(): void {\n    // clear canvas\n    this.chartCanvas.nativeElement.width = this.chartCanvas.nativeElement.height = 0;\n  }\n\n}\n","<div id=\"chart-stats\">\n  <span class=\"border-on-right\">\n    Healthy\n    <span id=\"healthy-number\" class=\"number\">{{healthyAbsolute}}</span>\n  </span>\n  <span class=\"border-on-right\">\n    Sick\n    <span id=\"sick-number\" class=\"number\">{{sickAbsolute}}</span>\n  </span>\n  <span class=\"border-on-right\">\n    Recovered\n    <span id=\"recovered-number\" class=\"number\">{{recoveredAbsolute}}</span>\n  </span>\n  <span>\n    Dead\n    <span id=\"dead-number\" class=\"number\">{{deadAbsolute}}</span>\n  </span>\n</div>\n\n<div #container class=\"chart-container\">\n  <canvas #canvasElement></canvas>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { SimulatorParams } from '../models/simulator-params';\n\n@Component({\n  selector: 'cosi-params',\n  templateUrl: './params.component.html',\n  styleUrls: ['./params.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ParamsComponent implements OnInit, OnDestroy {\n\n  @Input() initialParams: SimulatorParams;\n  @Output() paramsChanged = new EventEmitter<SimulatorParams>();\n\n  paramsForm = new FormGroup({\n    population: new FormControl(),\n    distancing: new FormControl(),\n    infectionRate: new FormControl(),\n    deathRate: new FormControl()\n  });\n  private paramsSubs: Subscription;\n\n  ngOnInit(): void {\n    if (this.initialParams) {\n      this.paramsForm.setValue(\n        {\n          population: this.initialParams.population,\n          distancing: this.initialParams.distancing * 100,\n          deathRate: this.initialParams.deathRate * 100,\n          infectionRate: this.initialParams.infectionRate * 100\n        },\n        {emitEvent: false}\n      );\n    }\n    this.paramsSubs = this.paramsForm.valueChanges\n      .subscribe(val => {\n        const params = {\n          population: val.population,\n          distancing: val.distancing / 100,\n          deathRate: val.deathRate / 100,\n          infectionRate: val.infectionRate / 100\n        };\n        this.paramsChanged.emit(params);\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.paramsSubs.unsubscribe();\n  }\n}\n","<form [formGroup]=\"paramsForm\">\n  <div>\n    <label for=\"population\">Population </label>\n    <input id=\"population\" type=\"range\" min=\"100\" max=\"500\" formControlName=\"population\">\n  </div>\n  <div>\n    <label for=\"distancing\">Social Distancing </label>\n    <input id=\"distancing\" type=\"range\" min=\"0\" max=\"100\" formControlName=\"distancing\">\n  </div>\n  <div>\n    <label for=\"deathRate\">Death Rate </label>\n    <input id=\"deathRate\" type=\"range\" min=\"0\" max=\"100\" formControlName=\"deathRate\">\n  </div>\n  <div>\n    <label for=\"infectionRate\">Infection Rate </label>\n    <input id=\"infectionRate\" type=\"range\" min=\"0\" max=\"100\" formControlName=\"infectionRate\">\n  </div>\n</form>\n","export class Vector2D {\n  constructor(public x: number, public y: number) {\n  }\n\n  static random(randomNumberGenerator: (() => number) | undefined): Vector2D {\n    // static function for a random vector\n    if (randomNumberGenerator) {\n      return new Vector2D(randomNumberGenerator(), randomNumberGenerator());\n    }\n    return new Vector2D(Math.random(), Math.random());\n  }\n\n  set(v: Vector2D): Vector2D {\n    this.x = v.x;\n    this.y = v.y;\n    return this;\n  }\n\n  add(v: Vector2D): Vector2D {\n    // add 'v' to this vector\n    this.x += v.x;\n    this.y += v.y;\n    return this;\n  }\n\n  sub(v: Vector2D): Vector2D {\n    // substract 'v' from this vector (direction from this to 'v' vector)\n    this.x -= v.x;\n    this.y -= v.y;\n    return this;\n  }\n\n  mult(factor: number): Vector2D {\n    // multiply this vector by constant 'factor'\n    this.x *= factor;\n    this.y *= factor;\n    return this;\n  }\n\n  div(factor: number): Vector2D {\n    // divide this vector by constant 'factor'\n    if (!factor) {\n      return new Vector2D(0, 0);\n    }\n    this.x /= factor;\n    this.y /= factor;\n    return this;\n  }\n\n  normalize(): Vector2D {\n    // convert to unit vector, vector with length of 1 (distance between origin and this vector)\n    // NOTE: unsafe normalize (if length is zero)!\n    return this.div(this.length());\n  }\n\n  length(): number {\n    // lenght of this vector (Pythagorean theorem)\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  dot(v: Vector2D): number {\n    // dot product between this and 'v' vector\n    return this.x * v.x + this.y * v.y;\n  }\n\n  negate(): Vector2D {\n    // opposite from this vector\n    return new Vector2D(\n      -this.x,\n      -this.y\n    );\n  }\n}\n","import { Border } from './border';\nimport { HEIGHT, PERSON_GAP, PERSON_RADIUS, PERSON_SPEED, sicknessInterval, WIDTH } from './constants';\nimport { Health } from './health.enum';\nimport { Vector2D } from './vector2d';\n\nexport class Person {\n\n  static readonly LEFT_BOUNDARY = PERSON_RADIUS;\n  static readonly RIGHT_BOUNDARY = WIDTH - PERSON_RADIUS;\n  static readonly TOP_BOUNDARY = PERSON_RADIUS;\n  static readonly BOTTOM_BOUNDARY = HEIGHT - PERSON_RADIUS;\n\n  position: Vector2D;\n  socialDistancing: boolean;\n\n\n  private velocity: Vector2D;\n  private timeToRecovery: number;\n\n  private positionDiff = new Vector2D(0, 0);\n  private rng: () => number;\n\n  constructor(public health: Health, randomNumberGenerator?: () => number) {\n    this.rng = randomNumberGenerator || Math.random;\n    this.position = Vector2D.random(this.rng);\n    this.position.x *= WIDTH;\n    this.position.y *= HEIGHT;\n    this.velocity = Person.applySpeed(Vector2D.random(this.rng).sub(new Vector2D(0.5, 0.5)));\n    this.socialDistancing = false;\n    this.timeToRecovery = Math.floor(\n      sicknessInterval.from + this.rng() * (sicknessInterval.to - sicknessInterval.from)\n    );\n  }\n\n  static applySpeed(velocity: Vector2D): Vector2D {\n    return velocity.normalize().mult(PERSON_SPEED);\n  }\n\n  static reflectBall(ball: Person, direction: Vector2D, distanceDiff: number): void {\n    direction.normalize();\n\n    // move the ball outside of collision\n    const diff = distanceDiff + PERSON_GAP / 2;\n    ball.position = ball.position.add(direction.mult(diff));\n\n    direction.normalize();\n    // reflect ball, solution: r=d−2(d*n)n (https://math.stackexchange.com/questions/13261/how-to-get-a-reflection-vector)\n    ball.velocity = ball.velocity.sub(direction.mult(2 * ball.velocity.dot(direction)));\n  }\n\n  static separateBalls(ballA: Person, ballB: Person, positionSub: Vector2D, distanceDiff: number): void {\n    // move balls outside of collision\n    const diff = distanceDiff / 2 + PERSON_GAP;\n    const adjustment = positionSub.normalize().mult(diff);\n    ballA.position = ballA.position.add(adjustment);\n    ballB.position = ballB.position.add(adjustment.negate());\n    positionSub.normalize();\n  }\n\n  static ellasticCollision(ballA: Person, ballB: Person, direction: Vector2D, distance: number): void {\n    // Elastic collision, but the ball speed is reverted after the collision (no energy lost in this case)\n    // The formula can be found here: https://en.wikipedia.org/wiki/Elastic_collision\n    const adjustment = direction.mult(ballA.velocity.sub(ballB.velocity).dot(direction) / (distance * distance));\n    ballA.velocity = Person.applySpeed(ballA.velocity.sub(adjustment));\n    ballB.velocity = Person.applySpeed(ballB.velocity.sub(adjustment.negate()));\n  }\n\n  static borderCollision(border: Border, ball: Person): void {\n    if (!border.closed) {\n      return;\n    }\n\n    if (border.ballLeftPosition <= ball.position.x && border.ballRightPosition >= ball.position.x) {\n      // move ball outside the border\n      ball.position.x = (ball.position.x <= border.position) ?\n        border.ballLeftPosition : border.ballRightPosition;\n\n      // reflect ball\n      ball.velocity.x = -ball.velocity.x;\n    }\n  }\n\n  canvasBoundariesCollision(): void {\n    if (this.position.x <= Person.LEFT_BOUNDARY || this.position.x >= Person.RIGHT_BOUNDARY) {\n      // move ball inside the boundaries\n      this.position.x = (this.position.x <= Person.LEFT_BOUNDARY) ?\n        Person.LEFT_BOUNDARY : Person.RIGHT_BOUNDARY;\n\n      // reflection ball\n      this.velocity.x = -this.velocity.x;\n    }\n    if (this.position.y <= Person.TOP_BOUNDARY || this.position.y >= Person.BOTTOM_BOUNDARY) {\n      // move ball inside the borders\n      this.position.y = (this.position.y <= Person.TOP_BOUNDARY) ?\n        Person.TOP_BOUNDARY : Person.BOTTOM_BOUNDARY;\n\n      // reflection ball\n      this.velocity.y = -this.velocity.y;\n    }\n  }\n\n  bordersCollision(leftBorder: Border, rightBorder: Border): void {\n    Person.borderCollision(leftBorder, this);\n    Person.borderCollision(rightBorder, this);\n  }\n\n  ballsCollision(ball: Person, infectionRate: number): void {\n    if (this.health === Health.DEAD || ball.health === Health.DEAD) {\n      return;\n    }\n    this.positionDiff.set(this.position);\n    this.positionDiff.sub(ball.position);\n    const distance = this.positionDiff.length();\n    const distanceDiff = (2 * PERSON_RADIUS) - distance; // 2* ballradius === minDistance\n\n    if (distanceDiff >= 0) {\n      if (this.socialDistancing) {\n        Person.reflectBall(ball, this.positionDiff.negate(), distanceDiff);\n      } else if (ball.socialDistancing) {\n        Person.reflectBall(this, this.positionDiff, distanceDiff);\n      } else {\n        Person.separateBalls(this, ball, this.positionDiff, distanceDiff);\n\n        if (!ball.socialDistancing || !this.socialDistancing) {\n          Person.ellasticCollision(this, ball, this.positionDiff, distance);\n        }\n      }\n\n      if ((this.health === Health.SICK || ball.health === Health.SICK) &&\n        (this.health === Health.HEALTHY || ball.health === Health.HEALTHY) &&\n        (this.rng() < infectionRate)) {\n        this.health = ball.health = Health.SICK;\n      }   // both will be sick if at least one is infected in the collision\n    }\n  }\n\n  move(): void {\n    if (!this.socialDistancing && this.health !== Health.DEAD)\n      // move the ball using velocities if not social distancing or dead\n    {\n      this.position = this.position.add(this.velocity);\n    }\n  }\n\n  checkHealth(deathRate: number): void {\n    if (this.health === Health.SICK && (--this.timeToRecovery) === 0)\n      // check if this ball is dead or recovered\n    {\n      this.health = (this.rng() < deathRate) ? Health.DEAD : Health.RECOVERED;\n    }\n  }\n}\n","import { AfterViewInit, Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { ChartComponent } from '../chart/chart.component';\nimport { Border } from '../models/border';\nimport {\n  borderWidthHalf,\n  colors,\n  FULL_ANGLE,\n  lightGrayColor,\n  oneThirdWidth,\n  PERSON_RADIUS,\n  TOTAL_FRAMES,\n  twoThirdsWidth,\n  updateIntervallMs,\n  WIDTH\n} from '../models/constants';\nimport { Health } from '../models/health.enum';\nimport { Person } from '../models/person';\nimport { SimulatorParams } from '../models/simulator-params';\n\n@Component({\n  selector: 'cosi-simulation',\n  templateUrl: './simulation.component.html',\n  styleUrls: ['./simulation.component.scss']\n})\nexport class SimulationComponent implements OnInit, AfterViewInit {\n\n  @ViewChild('canvasElement') canvas: ElementRef<HTMLCanvasElement>;\n  @ViewChild('container') canvasContainer: ElementRef<HTMLElement>;\n  @ViewChild(ChartComponent) chart: ChartComponent;\n\n  @Input() simulatorParams: SimulatorParams;\n  @Input() randomNumberGenerator?: () => number;\n\n  private rightBorder: Border = {\n    position: twoThirdsWidth,\n    leftWall: twoThirdsWidth - borderWidthHalf,\n    rightWall: twoThirdsWidth + borderWidthHalf,\n    ballLeftPosition: twoThirdsWidth - borderWidthHalf - PERSON_RADIUS,\n    ballRightPosition: twoThirdsWidth + borderWidthHalf + PERSON_RADIUS,\n    closed: false,\n    color: lightGrayColor\n  };\n  private leftBorder: Border = {\n    position: oneThirdWidth,\n    leftWall: oneThirdWidth - borderWidthHalf,\n    rightWall: oneThirdWidth + borderWidthHalf,\n    ballLeftPosition: oneThirdWidth - borderWidthHalf - PERSON_RADIUS,\n    ballRightPosition: oneThirdWidth + borderWidthHalf + PERSON_RADIUS,\n    closed: false,\n    color: lightGrayColor\n  };\n\n  private ctx: CanvasRenderingContext2D;\n  private persons: Person[] = [];\n  private currentFrame = 0;\n  private updateInterval: number;\n  private resizeTimeout: number;\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    const ctx = this.canvas.nativeElement.getContext('2d');\n    if (ctx) {\n      this.ctx = ctx;\n      this.drawOutline();\n    }\n  }\n\n  toggleRightBorder(): void {\n    this.rightBorder.closed = !this.rightBorder.closed;\n    this.rightBorder.color = this.rightBorder.closed ? colors.border.closed : colors.border.opened;\n  }\n\n  toggleLeftBorder(): void {\n    this.leftBorder.closed = !this.leftBorder.closed;\n    this.leftBorder.color = this.leftBorder.closed ? colors.border.closed : colors.border.opened;\n  }\n\n  start(): void {\n    clearInterval(this.updateInterval);\n\n    this.chart.init(this.simulatorParams.population);\n\n    // clean simulation states\n    this.persons = [];\n    this.currentFrame = 0;\n\n    // create sick and healthy balls\n    let ballIdx = 0;\n    while (ballIdx < 1) {\n      if (this.randomNumberGenerator) {\n        this.persons.push(new Person(Health.SICK, this.randomNumberGenerator));\n      } else {\n        this.persons.push(new Person(Health.SICK));\n      }\n      ballIdx++;\n    }\n    while (ballIdx < this.simulatorParams.population) {\n      if (this.randomNumberGenerator) {\n        this.persons.push(new Person(Health.HEALTHY, this.randomNumberGenerator));\n      } else {\n        this.persons.push(new Person(Health.HEALTHY));\n      }\n      ballIdx++;\n    }\n\n    // shuffle balls\n    this.shuffleBalls();\n\n    const socialDistancingTotal = Math.floor(this.simulatorParams.population * this.simulatorParams.distancing);\n    // make socialDistancing balls\n    for (let i = 0; i < socialDistancingTotal; i++) {\n      this.persons[i].socialDistancing = true;\n    }\n\n    // start chart\n    // start chart\n    this.chart.start();\n\n    // set interval\n    this.updateInterval = setInterval(\n      () => this.update(this.simulatorParams.infectionRate, this.simulatorParams.deathRate),\n      updateIntervallMs\n    );\n  }\n\n  private shuffleBalls(): void {\n    // Fisher–Yates shuffle (https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n    for (let i = 0; i < this.persons.length; i++) {\n      const rand = Math.floor((this.randomNumberGenerator ? this.randomNumberGenerator() : Math.random()) * this.persons.length);\n      const temp = this.persons[i];\n      this.persons[i] = this.persons[rand];\n      this.persons[rand] = temp;\n    }\n  }\n\n  private update(infectionRate: number, deathrate: number): void {\n    // This O(N^2) method could be faster using\n    // Binary Space Partitioning (https://en.wikipedia.org/wiki/Binary_space_partitioning)\n    // or Quadtrees (https://en.wikipedia.org/wiki/Quadtree)\n    for (let i = 0; i < this.persons.length; i++) {\n      for (let j = i + 1; j < this.persons.length; j++) {\n        // check collision and update states, positions & velocities\n        this.persons[i].ballsCollision(this.persons[j], infectionRate);\n      }\n    }\n\n    const statsData = {[Health.SICK]: 0, [Health.HEALTHY]: 0, [Health.RECOVERED]: 0, [Health.DEAD]: 0};\n    this.persons.forEach(person => {\n      // count stats\n      statsData[person.health]++;\n\n      // update ball positions & velocities\n      person.move();\n      person.checkHealth(deathrate);\n\n      // check canvas boundaries collision\n      person.canvasBoundariesCollision();\n\n      // check borders collision\n      person.bordersCollision(this.leftBorder, this.rightBorder);\n    });\n\n    // update chart\n    this.chart.update(statsData);\n\n    // draw everything\n    this.draw();\n\n    // stop simulation if needed\n    this.currentFrame++;\n    if (this.currentFrame === TOTAL_FRAMES) {\n      clearInterval(this.updateInterval);\n      window.addEventListener('resize', () => this.resizeEventHandler());\n      this.simulationEnd();\n    }\n  }\n\n  private resizeEventHandler(): void {\n    // this mechanism is to prevent/delay many drawings of the same things when resizing the browser\n    clearTimeout(this.resizeTimeout);\n    this.resizeTimeout = setTimeout(() => {\n      this.draw();\n    }, updateIntervallMs);\n  }\n\n  private draw(): void {\n    const dimensions = this.drawOutline();\n\n    // draw dead balls (they should be under all other balls in the canvas)\n    for (let i = 0; i < this.persons.length; i++) {\n      if (this.persons[i].health === Health.DEAD) {\n        this.drawBall(this.persons[i], dimensions.scaleWidthRatio);\n      }\n    }\n    // draw other balls\n    for (let i = 0; i < this.persons.length; i++) {\n      if (this.persons[i].health !== Health.DEAD) {\n        this.drawBall(this.persons[i], dimensions.scaleWidthRatio);\n      }\n    }\n\n    // draw chart\n    this.chart.draw();\n  }\n\n  private drawOutline(): { width: number, height: number, scaleWidthRatio: number } {\n    const dimensions = {\n      width: this.canvasContainer.nativeElement.offsetWidth,\n      height: this.canvasContainer.nativeElement.offsetHeight,\n      scaleWidthRatio: this.canvas.nativeElement.offsetWidth / WIDTH\n    };\n\n    // update dimensions and clear canvas\n    // the canvas is cleared when a new value is attached to dimensions (no matter if a same value)\n    this.canvas.nativeElement.width = dimensions.width;\n    this.canvas.nativeElement.height = dimensions.height;\n    dimensions.scaleWidthRatio = this.canvas.nativeElement.offsetWidth / WIDTH;\n\n    // draw borders\n    this.drawBorder(this.leftBorder, dimensions);\n    this.drawBorder(this.rightBorder, dimensions);\n\n    // draw canvas boundaries\n    this.drawCanvasBoundaries(dimensions);\n    return dimensions;\n  }\n\n  private drawLine(color: string, position: number, dimensions: { width: number, height: number, scaleWidthRatio: number }): void {\n    const scaledPosition = position * dimensions.scaleWidthRatio;\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(scaledPosition, 0);\n    this.ctx.lineTo(scaledPosition, dimensions.height);\n    this.ctx.closePath();\n\n    this.ctx.strokeStyle = color;\n    this.ctx.stroke();\n  }\n\n  private drawBorder(border: Border, dimensions: { width: number, height: number, scaleWidthRatio: number }): void {\n    this.drawLine(border.color, border.leftWall, dimensions);\n    this.drawLine(border.color, border.rightWall, dimensions);\n  }\n\n  private drawCanvasBoundaries(dimensions: { width: number, height: number, scaleWidthRatio: number }): void {\n    this.ctx.strokeStyle = colors.canvasBoundary;\n    this.ctx.strokeRect(0, 0, dimensions.width, dimensions.height);\n  }\n\n  private drawBall(ball: Person, scaleWidthRatio: number): void {\n    const scaledX = ball.position.x * scaleWidthRatio;\n    const scaledY = ball.position.y * scaleWidthRatio;\n    const scaledRadius = PERSON_RADIUS * scaleWidthRatio;\n\n    this.ctx.beginPath();\n    this.ctx.arc(scaledX, scaledY, scaledRadius, 0, FULL_ANGLE);\n    this.ctx.closePath();\n\n    this.ctx.fillStyle = colors.states[ball.health];\n    this.ctx.fill();\n  }\n\n  private simulationEnd(): void {\n    // hide(borderBtnsContainer);\n    // show(simulationEndBtnsContainer);\n  }\n}\n","<div>\n  <div class=\"button-container\">\n    <button class=\"secondary-button\" (click)=\"toggleLeftBorder()\">Border Left</button>\n    <button class=\"secondary-button\" (click)=\"toggleRightBorder()\">Border Right</button>\n  </div>\n  <div #container id=\"simulation-dimensions\" class=\"simulation-container\">\n    <canvas #canvasElement></canvas>\n  </div>\n  <cosi-chart></cosi-chart>\n</div>\n","<div class=\"flex\">\n  <div class=\"param-container\">\n    <cosi-params [initialParams]=\"mainParams\" (paramsChanged)=\"changeMainParams($event)\"></cosi-params>\n    <div class=\"flex column\">\n      <button class=\"start-button\" (click)=\"start(simulator1)\">(Re)Start Simulation</button>\n      <button class=\"secondary-button\" (click)=\"show2nd(simulator2)\">Show Second Simulation</button>\n    </div>\n  </div>\n  <div #simulator1 tabindex=\"1\">\n    <cosi-simulation [simulatorParams]=\"mainParams\"\n                     [randomNumberGenerator]=\"rng1\">\n    </cosi-simulation>\n  </div>\n</div>\n<div class=\"flex\" #simulator2 tabindex=\"1\">\n  <ng-container *ngIf=\"is2ndVisible\">\n    <div class=\"param-container\">\n      <cosi-params [initialParams]=\"secondParams\" (paramsChanged)=\"changeSecondParams($event)\"></cosi-params>\n      <div class=\"flex column\">\n        <button class=\"start-button\" (click)=\"start(simulator1)\">(Re)Start Simulation</button>\n      </div>\n    </div>\n    <div>\n      <cosi-simulation [simulatorParams]=\"secondParams\"\n                       [randomNumberGenerator]=\"rng2\">\n      </cosi-simulation>\n    </div>\n  </ng-container>\n</div>\n\n","import { ApplicationRef, Component, ViewChildren } from '@angular/core';\n\nimport seedrandom from 'seedrandom';\nimport { DEATH_RATE, INFECTION_RATE } from './models/constants';\nimport { SimulatorParams } from './models/simulator-params';\nimport { SimulationComponent } from './simulation/simulation.component';\n\n@Component({\n  selector: 'cosi-simulator',\n  templateUrl: './simulator.component.html',\n  styleUrls: ['./simulator.component.scss']\n})\nexport class SimulatorComponent {\n\n  @ViewChildren(SimulationComponent) charts: SimulationComponent[];\n\n  randomSeed = Math.random();\n  rng1 = seedrandom(this.randomSeed);\n  rng2 = seedrandom(this.randomSeed);\n  is2ndVisible: boolean;\n  private readonly initialState = {\n    population: 200,\n    distancing: 0,\n    deathRate: DEATH_RATE,\n    infectionRate: INFECTION_RATE\n  };\n  mainParams: SimulatorParams = this.initialState;\n  secondParams: SimulatorParams = this.initialState;\n\n  constructor(private appRef: ApplicationRef) {\n  }\n\n  start(simulator1: HTMLDivElement): void {\n    this.randomSeed = Math.random();\n    this.rng1 = seedrandom(this.randomSeed);\n    this.rng2 = seedrandom(this.randomSeed);\n    this.charts.forEach(chart => chart.start());\n    simulator1.scrollIntoView();\n    this.appRef.tick();\n  }\n\n  show2nd(simulator2: HTMLDivElement): void {\n    this.is2ndVisible = !this.is2ndVisible;\n    if (this.is2ndVisible) {\n      simulator2.scrollIntoView({block: 'center'});\n    }\n    this.appRef.tick();\n  }\n\n  changeMainParams($event: SimulatorParams) {\n    this.mainParams = $event;\n    this.appRef.tick();\n  }\n\n  changeSecondParams($event: SimulatorParams) {\n    this.secondParams = $event;\n    this.appRef.tick();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ChartComponent } from './chart/chart.component';\nimport { ParamsComponent } from './params/params.component';\nimport { SimulationComponent } from './simulation/simulation.component';\nimport { SimulatorComponent } from './simulator.component';\n\n\n@NgModule({\n  declarations: [\n    ParamsComponent,\n    SimulatorComponent,\n    ChartComponent,\n    SimulationComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule\n  ],\n  exports: [SimulatorComponent]\n})\nexport class PandemicSimulatorLibModule {\n}\n"],"names":["i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵelement","i0.ɵɵadvance","i0.ɵɵtextInterpolate","Component","ViewChild","EventEmitter","FormGroup","FormControl","i0.ɵɵproperty","ChangeDetectionStrategy","Input","Output","i0.ɵɵlistener","i0.ɵɵelementContainerStart","i0.ɵɵelementContainerEnd","i0.ɵɵtemplate","ViewChildren","CommonModule","ReactiveFormsModule","NgModule"],"mappings":"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"}