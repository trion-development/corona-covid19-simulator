{"version":3,"sources":["../../../projects/pandemic-simulator-lib/src/lib/models/health.enum.ts","../../../projects/pandemic-simulator-lib/src/lib/models/constants.ts","../../../projects/pandemic-simulator-lib/src/lib/chart/chart.component.ts","../../../projects/pandemic-simulator-lib/src/lib/chart/chart.component.html","../../../projects/pandemic-simulator-lib/src/lib/params/params.component.ts","../../../projects/pandemic-simulator-lib/src/lib/params/params.component.html","../../../projects/pandemic-simulator-lib/src/lib/models/vector2d.ts","../../../projects/pandemic-simulator-lib/src/lib/models/person.ts","../../../projects/pandemic-simulator-lib/src/lib/simulation/simulation.component.ts","../../../projects/pandemic-simulator-lib/src/lib/simulator.component.html","../../../projects/pandemic-simulator-lib/src/lib/simulation/simulation.component.html","../../../projects/pandemic-simulator-lib/src/lib/simulator.component.ts","../../../projects/pandemic-simulator-lib/src/lib/pandemic-simulator-lib.module.ts"],"names":["Health","updateIntervallMs","WIDTH","HEIGHT","PERSON_RADIUS","FULL_ANGLE","Math","PI","oneThirdWidth","twoThirdsWidth","blackColor","lightGrayColor","healthyColor","sickColor","recoveredColor","colors","border","opened","closed","states","_a","HEALTHY","SICK","RECOVERED","DEAD","chart","healthy","safeSick","dangerSick","recovered","dead","empty","safeLine","canvasBoundary","sicknessInterval","ChartComponent","cdRef","this","prototype","ngAfterViewInit","ctx","chartCanvas","nativeElement","getContext","context","init","value","maxValue","start","currentStep","update","data","deadAbsolute","recoveredAbsolute","sickAbsolute","healthyAbsolute","detectChanges","sickValue","healthyValue","recoveredValue","push","draw","width","containerElement","offsetWidth","height","offsetHeight","stepSize","currentStepSize","drawRect","drawPolygon","drawLine","from","to","beginPath","moveTo","lineTo","closePath","strokeStyle","stroke","color","x","y","fillStyle","fillRect","step","i","length","fill","clear","i0","ChangeDetectorRef","selectors","viewQuery","rf","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵelement","i0.ɵɵadvance","i0.ɵɵtextInterpolate","ParamsComponent","paramsChanged","EventEmitter","paramsForm","FormGroup","population","FormControl","distancing","infectionRate","deathRate","ngOnInit","_this","initialParams","setValue","emitEvent","paramsSubs","valueChanges","subscribe","val","params","emit","ngOnDestroy","unsubscribe","inputs","outputs","decls","vars","consts","template","i0.ɵɵproperty","Vector2D","random","randomNumberGenerator","set","v","add","sub","mult","factor","div","normalize","sqrt","dot","negate","Person","health","positionDiff","rng","position","velocity","applySpeed","socialDistancing","timeToRecovery","floor","reflectBall","ball","direction","distanceDiff","diff","PERSON_GAP","separateBalls","ballA","ballB","positionSub","adjustment","ellasticCollision","distance","borderCollision","ballLeftPosition","ballRightPosition","canvasBoundariesCollision","LEFT_BOUNDARY","RIGHT_BOUNDARY","TOP_BOUNDARY","BOTTOM_BOUNDARY","bordersCollision","leftBorder","rightBorder","ballsCollision","move","checkHealth","SimulationComponent","leftWall","rightWall","persons","currentFrame","canvas","drawOutline","toggleRightBorder","toggleLeftBorder","clearInterval","updateInterval","simulatorParams","ballIdx","shuffleBalls","socialDistancingTotal","setInterval","rand","temp","deathrate","j","statsData","forEach","person","fps","window","addEventListener","resizeEventHandler","simulationEnd","clearTimeout","resizeTimeout","setTimeout","dimensions","drawBall","scaleWidthRatio","canvasContainer","drawBorder","drawCanvasBoundaries","scaledPosition","strokeRect","scaledX","scaledY","scaledRadius","arc","i0.ɵɵelementContainerStart","i0.ɵɵlistener","i0.ɵɵelementContainerEnd","ctx_r2","rng2","SimulatorComponent","appRef","randomSeed","rng1","seedrandom","initialState","mainParams","secondParams","simulator1","charts","scrollIntoView","tick","show2nd","simulator2","is2ndVisible","block","changeMainParams","$event","changeSecondParams","ApplicationRef","_r0","_r1","i0.ɵɵtemplate","PandemicSimulatorLibModule","imports","CommonModule","ReactiveFormsModule","declarations","exports"],"mappings":"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","sourcesContent":["export enum Health {\n  SICK,\n  HEALTHY,\n  RECOVERED,\n  DEAD\n}\n","import { Border } from './border';\nimport { Health } from './health.enum';\n\nexport const fps = 60; // Note: if you change this, you'll need to addapt ball speed\nexport const updateIntervallMs = 1000 / fps;\nexport const simulationSeconds = 30; // the simulation lasts 30 seconds\nexport const TOTAL_FRAMES = fps * simulationSeconds;\nexport const safeLimitPercentage = 0.3; // that's 30 percents capacity\nexport const chartSafeLimit = 1 - safeLimitPercentage;\n\n// loval units\nexport const WIDTH = 100;\nexport const HEIGHT = 100 * 2 / 3; // the canvas ratio is always 3:2\nexport const PERSON_RADIUS = 0.8;\nexport const PERSON_SPEED = 0.2;\nexport const PERSON_GAP = 0.001; // a small value used to create gaps between balls\nexport const FULL_ANGLE = 2 * Math.PI;\nexport const borderWidth = 1;\n\nexport const oneThirdWidth = WIDTH / 3;\nexport const twoThirdsWidth = 2 * oneThirdWidth;\nexport const borderWidthHalf = borderWidth / 2;\n\n// colors\nexport const blackColor = '#000000';\nexport const lightGrayColor = '#EEEEEE';\nexport const healthyColor = '#a6db68';\nexport const sickColor = '#E53935';\nexport const recoveredColor = '#69a7db';\nexport const dangerSickColor = '#B71C1C';\n\nexport const colors = {\n  border: {\n    opened: lightGrayColor,\n    closed: blackColor\n  },\n  states: {\n    [Health.HEALTHY]: healthyColor,\n    [Health.SICK]: sickColor,\n    [Health.RECOVERED]: recoveredColor,\n    [Health.DEAD]: blackColor\n  },\n  chart: {\n    healthy: healthyColor,\n    safeSick: sickColor,\n    dangerSick: dangerSickColor,\n    recovered: recoveredColor,\n    dead: blackColor,\n    empty: lightGrayColor,\n    safeLine: lightGrayColor\n  },\n  canvasBoundary: blackColor\n};\n\n\nexport const INFECTION_RATE = 1;\nexport const DEATH_RATE = 0.03;\n\nexport const sicknessInterval = {\n  from: 6 * fps,\n  to: 8 * fps\n};\n","import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';\nimport { chartSafeLimit, colors, TOTAL_FRAMES } from '../models/constants';\nimport { Health } from '../models/health.enum';\n\n@Component({\n  selector: 'cosi-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.scss']\n})\nexport class ChartComponent implements AfterViewInit {\n\n  @ViewChild('canvasElement') chartCanvas: ElementRef<HTMLCanvasElement>;\n  @ViewChild('container') containerElement: ElementRef<HTMLElement>;\n\n  deadAbsolute: number;\n  recoveredAbsolute: number;\n  sickAbsolute: number;\n  healthyAbsolute: number;\n\n  private currentStep: number;\n  private dangerSick: number[];\n  // private safeSick: number[];\n  private healthy: number[];\n  private recovered: number[];\n  private context: CanvasRenderingContext2D;\n  private maxValue: number;\n\n  constructor(private cdRef: ChangeDetectorRef) {\n  }\n\n  ngAfterViewInit(): void {\n    const ctx = this.chartCanvas.nativeElement.getContext('2d');\n    if (ctx) {\n      this.context = ctx;\n    }\n  }\n\n  init(value: number): void {\n    // init parameters\n    this.maxValue = value;\n  }\n\n  start(): void {\n    // clean chart states\n    this.dangerSick = [];\n    // this.safeSick = [];\n    this.healthy = [];\n    this.recovered = [];\n    this.currentStep = 0;\n  }\n\n  update(data: { [K in Health]: number }): void {\n    // save the values as percentages\n    this.deadAbsolute = data[Health.DEAD];\n    this.recoveredAbsolute = data[Health.RECOVERED];\n    this.sickAbsolute = data[Health.SICK];\n    this.healthyAbsolute = data[Health.HEALTHY];\n    this.cdRef.detectChanges();\n\n    let sickValue = this.maxValue - data[Health.SICK];\n    let healthyValue = sickValue - data[Health.HEALTHY];\n    let recoveredValue = healthyValue - data[Health.RECOVERED];\n    sickValue /= this.maxValue;\n    healthyValue /= this.maxValue;\n    recoveredValue /= this.maxValue;\n\n    this.dangerSick.push(sickValue);\n    // this.safeSick.push(Math.max(sickValue, chartSafeLimit));\n    this.healthy.push(healthyValue);\n    this.recovered.push(recoveredValue);\n  }\n\n  draw(): void {\n    // The chart canvas width and height can be found using offsetWidth and offsetHeight\n    const width = this.containerElement.nativeElement.offsetWidth;\n    const height = this.containerElement.nativeElement.offsetHeight;\n    const stepSize = width / (TOTAL_FRAMES - 1); // minus the first frame/result, because that's the start of the chart\n    const currentStepSize = this.currentStep * stepSize;\n\n    // update dimensions and clear canvas\n    // the canvas is cleared when a new value is attached to dimensions (no matter if a same value)\n    this.chartCanvas.nativeElement.width = width;\n    this.chartCanvas.nativeElement.height = height;\n\n    // draw empty rect (the upcoming time)\n    this.drawRect(colors.chart.empty, currentStepSize, 0, width - currentStepSize, height);\n\n    // draw dead part (a whole rectangle, the elapsed time)\n    this.drawRect(colors.chart.dead, 0, 0, currentStepSize, height);\n\n    // draw recovered part\n    this.drawPolygon(this.recovered, colors.chart.recovered, height, stepSize);\n\n    // draw healthy part\n    this.drawPolygon(this.healthy, colors.chart.healthy, height, stepSize);\n\n    // draw danger sick part\n    this.drawPolygon(this.dangerSick, colors.chart.dangerSick, height, stepSize);\n\n    // draw \"safe\" sick part\n    // this.drawPolygon(this.safeSick, colors.chart.safeSick, height, stepSize);\n\n    // draw \"safe\" line\n    // this.drawLine(height * chartSafeLimit, 0, currentStepSize);\n\n    this.currentStep++;\n  }\n\n  private drawLine(height: number, from: number, to: number): void {\n    this.context.beginPath();\n    this.context.moveTo(from, height);\n    this.context.lineTo(to, height);\n    this.context.closePath();\n\n    this.context.strokeStyle = colors.chart.safeLine;\n    this.context.stroke();\n  }\n\n  private drawRect(color: string, x: number, y: number, width: number, height: number): void {\n    this.context.fillStyle = color;\n    this.context.fillRect(x, y, width, height);\n  }\n\n  private drawPolygon(data: number[], color: string, height: number, stepSize: number): void {\n    this.context.beginPath();\n    this.context.moveTo(0, height);\n\n    let step = -stepSize;\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < data.length; i++) {\n      step += stepSize;\n      this.context.lineTo(step, data[i] * height);\n    }\n\n    this.context.lineTo(step, height);\n    this.context.closePath();\n\n    this.context.fillStyle = color;\n    this.context.fill();\n  }\n\n  private clear(): void {\n    // clear canvas\n    this.chartCanvas.nativeElement.width = this.chartCanvas.nativeElement.height = 0;\n  }\n\n}\n","<div id=\"chart-stats\">\n  <span class=\"border-on-right\">\n    Healthy\n    <span id=\"healthy-number\" class=\"number\">{{healthyAbsolute}}</span>\n  </span>\n  <span class=\"border-on-right\">\n    Sick\n    <span id=\"sick-number\" class=\"number\">{{sickAbsolute}}</span>\n  </span>\n  <span class=\"border-on-right\">\n    Recovered\n    <span id=\"recovered-number\" class=\"number\">{{recoveredAbsolute}}</span>\n  </span>\n  <span>\n    Dead\n    <span id=\"dead-number\" class=\"number\">{{deadAbsolute}}</span>\n  </span>\n</div>\n\n<div #container class=\"chart-container\">\n  <canvas #canvasElement></canvas>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { SimulatorParams } from '../models/simulator-params';\n\n@Component({\n  selector: 'cosi-params',\n  templateUrl: './params.component.html',\n  styleUrls: ['./params.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ParamsComponent implements OnInit, OnDestroy {\n\n  @Input() initialParams: SimulatorParams;\n  @Output() paramsChanged = new EventEmitter<SimulatorParams>();\n\n  paramsForm = new FormGroup({\n    population: new FormControl(),\n    distancing: new FormControl(),\n    infectionRate: new FormControl(),\n    deathRate: new FormControl()\n  });\n  private paramsSubs: Subscription;\n\n  ngOnInit(): void {\n    if (this.initialParams) {\n      this.paramsForm.setValue(\n        {\n          population: this.initialParams.population,\n          distancing: this.initialParams.distancing * 100,\n          deathRate: this.initialParams.deathRate * 100,\n          infectionRate: this.initialParams.infectionRate * 100\n        },\n        {emitEvent: false}\n      );\n    }\n    this.paramsSubs = this.paramsForm.valueChanges\n      .subscribe(val => {\n        const params = {\n          population: val.population,\n          distancing: val.distancing / 100,\n          deathRate: val.deathRate / 100,\n          infectionRate: val.infectionRate / 100\n        };\n        this.paramsChanged.emit(params);\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.paramsSubs.unsubscribe();\n  }\n}\n","<form [formGroup]=\"paramsForm\">\n  <div>\n    <label for=\"population\">Population </label>\n    <input id=\"population\" type=\"range\" min=\"100\" max=\"500\" formControlName=\"population\">\n  </div>\n  <div>\n    <label for=\"distancing\">Social Distancing </label>\n    <input id=\"distancing\" type=\"range\" min=\"0\" max=\"100\" formControlName=\"distancing\">\n  </div>\n  <div>\n    <label for=\"deathRate\">Death Rate </label>\n    <input id=\"deathRate\" type=\"range\" min=\"0\" max=\"100\" formControlName=\"deathRate\">\n  </div>\n  <div>\n    <label for=\"infectionRate\">Infection Rate </label>\n    <input id=\"infectionRate\" type=\"range\" min=\"0\" max=\"100\" formControlName=\"infectionRate\">\n  </div>\n</form>\n","export class Vector2D {\n  constructor(public x: number, public y: number) {\n  }\n\n  static random(randomNumberGenerator: (() => number) | undefined): Vector2D {\n    // static function for a random vector\n    if (randomNumberGenerator) {\n      return new Vector2D(randomNumberGenerator(), randomNumberGenerator());\n    }\n    return new Vector2D(Math.random(), Math.random());\n  }\n\n  set(v: Vector2D): Vector2D {\n    this.x = v.x;\n    this.y = v.y;\n    return this;\n  }\n\n  add(v: Vector2D): Vector2D {\n    // add 'v' to this vector\n    this.x += v.x;\n    this.y += v.y;\n    return this;\n  }\n\n  sub(v: Vector2D): Vector2D {\n    // substract 'v' from this vector (direction from this to 'v' vector)\n    this.x -= v.x;\n    this.y -= v.y;\n    return this;\n  }\n\n  mult(factor: number): Vector2D {\n    // multiply this vector by constant 'factor'\n    this.x *= factor;\n    this.y *= factor;\n    return this;\n  }\n\n  div(factor: number): Vector2D {\n    // divide this vector by constant 'factor'\n    if (!factor) {\n      return new Vector2D(0, 0);\n    }\n    this.x /= factor;\n    this.y /= factor;\n    return this;\n  }\n\n  normalize(): Vector2D {\n    // convert to unit vector, vector with length of 1 (distance between origin and this vector)\n    // NOTE: unsafe normalize (if length is zero)!\n    return this.div(this.length());\n  }\n\n  length(): number {\n    // lenght of this vector (Pythagorean theorem)\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  dot(v: Vector2D): number {\n    // dot product between this and 'v' vector\n    return this.x * v.x + this.y * v.y;\n  }\n\n  negate(): Vector2D {\n    // opposite from this vector\n    return new Vector2D(\n      -this.x,\n      -this.y\n    );\n  }\n}\n","import { Border } from './border';\nimport { HEIGHT, PERSON_GAP, PERSON_RADIUS, PERSON_SPEED, sicknessInterval, WIDTH } from './constants';\nimport { Health } from './health.enum';\nimport { Vector2D } from './vector2d';\n\nexport class Person {\n\n  static readonly LEFT_BOUNDARY = PERSON_RADIUS;\n  static readonly RIGHT_BOUNDARY = WIDTH - PERSON_RADIUS;\n  static readonly TOP_BOUNDARY = PERSON_RADIUS;\n  static readonly BOTTOM_BOUNDARY = HEIGHT - PERSON_RADIUS;\n\n  position: Vector2D;\n  socialDistancing: boolean;\n\n\n  private velocity: Vector2D;\n  private timeToRecovery: number;\n\n  private positionDiff = new Vector2D(0, 0);\n  private rng: () => number;\n\n  constructor(public health: Health, randomNumberGenerator?: () => number) {\n    this.rng = randomNumberGenerator || Math.random;\n    this.position = Vector2D.random(this.rng);\n    this.position.x *= WIDTH;\n    this.position.y *= HEIGHT;\n    this.velocity = Person.applySpeed(Vector2D.random(this.rng).sub(new Vector2D(0.5, 0.5)));\n    this.socialDistancing = false;\n    this.timeToRecovery = Math.floor(\n      sicknessInterval.from + this.rng() * (sicknessInterval.to - sicknessInterval.from)\n    );\n  }\n\n  static applySpeed(velocity: Vector2D): Vector2D {\n    return velocity.normalize().mult(PERSON_SPEED);\n  }\n\n  static reflectBall(ball: Person, direction: Vector2D, distanceDiff: number): void {\n    direction.normalize();\n\n    // move the ball outside of collision\n    const diff = distanceDiff + PERSON_GAP / 2;\n    ball.position = ball.position.add(direction.mult(diff));\n\n    direction.normalize();\n    // reflect ball, solution: r=d−2(d*n)n (https://math.stackexchange.com/questions/13261/how-to-get-a-reflection-vector)\n    ball.velocity = ball.velocity.sub(direction.mult(2 * ball.velocity.dot(direction)));\n  }\n\n  static separateBalls(ballA: Person, ballB: Person, positionSub: Vector2D, distanceDiff: number): void {\n    // move balls outside of collision\n    const diff = distanceDiff / 2 + PERSON_GAP;\n    const adjustment = positionSub.normalize().mult(diff);\n    ballA.position = ballA.position.add(adjustment);\n    ballB.position = ballB.position.add(adjustment.negate());\n    positionSub.normalize();\n  }\n\n  static ellasticCollision(ballA: Person, ballB: Person, direction: Vector2D, distance: number): void {\n    // Elastic collision, but the ball speed is reverted after the collision (no energy lost in this case)\n    // The formula can be found here: https://en.wikipedia.org/wiki/Elastic_collision\n    const adjustment = direction.mult(ballA.velocity.sub(ballB.velocity).dot(direction) / (distance * distance));\n    ballA.velocity = Person.applySpeed(ballA.velocity.sub(adjustment));\n    ballB.velocity = Person.applySpeed(ballB.velocity.sub(adjustment.negate()));\n  }\n\n  static borderCollision(border: Border, ball: Person): void {\n    if (!border.closed) {\n      return;\n    }\n\n    if (border.ballLeftPosition <= ball.position.x && border.ballRightPosition >= ball.position.x) {\n      // move ball outside the border\n      ball.position.x = (ball.position.x <= border.position) ?\n        border.ballLeftPosition : border.ballRightPosition;\n\n      // reflect ball\n      ball.velocity.x = -ball.velocity.x;\n    }\n  }\n\n  canvasBoundariesCollision(): void {\n    if (this.position.x <= Person.LEFT_BOUNDARY || this.position.x >= Person.RIGHT_BOUNDARY) {\n      // move ball inside the boundaries\n      this.position.x = (this.position.x <= Person.LEFT_BOUNDARY) ?\n        Person.LEFT_BOUNDARY : Person.RIGHT_BOUNDARY;\n\n      // reflection ball\n      this.velocity.x = -this.velocity.x;\n    }\n    if (this.position.y <= Person.TOP_BOUNDARY || this.position.y >= Person.BOTTOM_BOUNDARY) {\n      // move ball inside the borders\n      this.position.y = (this.position.y <= Person.TOP_BOUNDARY) ?\n        Person.TOP_BOUNDARY : Person.BOTTOM_BOUNDARY;\n\n      // reflection ball\n      this.velocity.y = -this.velocity.y;\n    }\n  }\n\n  bordersCollision(leftBorder: Border, rightBorder: Border): void {\n    Person.borderCollision(leftBorder, this);\n    Person.borderCollision(rightBorder, this);\n  }\n\n  ballsCollision(ball: Person, infectionRate: number): void {\n    if (this.health === Health.DEAD || ball.health === Health.DEAD) {\n      return;\n    }\n    this.positionDiff.set(this.position);\n    this.positionDiff.sub(ball.position);\n    const distance = this.positionDiff.length();\n    const distanceDiff = (2 * PERSON_RADIUS) - distance; // 2* ballradius === minDistance\n\n    if (distanceDiff >= 0) {\n      if (this.socialDistancing) {\n        Person.reflectBall(ball, this.positionDiff.negate(), distanceDiff);\n      } else if (ball.socialDistancing) {\n        Person.reflectBall(this, this.positionDiff, distanceDiff);\n      } else {\n        Person.separateBalls(this, ball, this.positionDiff, distanceDiff);\n\n        if (!ball.socialDistancing || !this.socialDistancing) {\n          Person.ellasticCollision(this, ball, this.positionDiff, distance);\n        }\n      }\n\n      if ((this.health === Health.SICK || ball.health === Health.SICK) &&\n        (this.health === Health.HEALTHY || ball.health === Health.HEALTHY) &&\n        (this.rng() < infectionRate)) {\n        this.health = ball.health = Health.SICK;\n      }   // both will be sick if at least one is infected in the collision\n    }\n  }\n\n  move(): void {\n    if (!this.socialDistancing && this.health !== Health.DEAD)\n      // move the ball using velocities if not social distancing or dead\n    {\n      this.position = this.position.add(this.velocity);\n    }\n  }\n\n  checkHealth(deathRate: number): void {\n    if (this.health === Health.SICK && (--this.timeToRecovery) === 0)\n      // check if this ball is dead or recovered\n    {\n      this.health = (this.rng() < deathRate) ? Health.DEAD : Health.RECOVERED;\n    }\n  }\n}\n","import { AfterViewInit, Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { ChartComponent } from '../chart/chart.component';\nimport { Border } from '../models/border';\nimport {\n  borderWidthHalf,\n  colors,\n  FULL_ANGLE,\n  lightGrayColor,\n  oneThirdWidth,\n  PERSON_RADIUS,\n  TOTAL_FRAMES,\n  twoThirdsWidth,\n  updateIntervallMs,\n  WIDTH\n} from '../models/constants';\nimport { Health } from '../models/health.enum';\nimport { Person } from '../models/person';\nimport { SimulatorParams } from '../models/simulator-params';\n\n@Component({\n  selector: 'cosi-simulation',\n  templateUrl: './simulation.component.html',\n  styleUrls: ['./simulation.component.scss']\n})\nexport class SimulationComponent implements OnInit, AfterViewInit {\n\n  @ViewChild('canvasElement') canvas: ElementRef<HTMLCanvasElement>;\n  @ViewChild('container') canvasContainer: ElementRef<HTMLElement>;\n  @ViewChild(ChartComponent) chart: ChartComponent;\n\n  @Input() simulatorParams: SimulatorParams;\n  @Input() randomNumberGenerator?: () => number;\n\n  private rightBorder: Border = {\n    position: twoThirdsWidth,\n    leftWall: twoThirdsWidth - borderWidthHalf,\n    rightWall: twoThirdsWidth + borderWidthHalf,\n    ballLeftPosition: twoThirdsWidth - borderWidthHalf - PERSON_RADIUS,\n    ballRightPosition: twoThirdsWidth + borderWidthHalf + PERSON_RADIUS,\n    closed: false,\n    color: lightGrayColor\n  };\n  private leftBorder: Border = {\n    position: oneThirdWidth,\n    leftWall: oneThirdWidth - borderWidthHalf,\n    rightWall: oneThirdWidth + borderWidthHalf,\n    ballLeftPosition: oneThirdWidth - borderWidthHalf - PERSON_RADIUS,\n    ballRightPosition: oneThirdWidth + borderWidthHalf + PERSON_RADIUS,\n    closed: false,\n    color: lightGrayColor\n  };\n\n  private ctx: CanvasRenderingContext2D;\n  private persons: Person[] = [];\n  private currentFrame = 0;\n  private updateInterval: number;\n  private resizeTimeout: number;\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    const ctx = this.canvas.nativeElement.getContext('2d');\n    if (ctx) {\n      this.ctx = ctx;\n      this.drawOutline();\n    }\n  }\n\n  toggleRightBorder(): void {\n    this.rightBorder.closed = !this.rightBorder.closed;\n    this.rightBorder.color = this.rightBorder.closed ? colors.border.closed : colors.border.opened;\n  }\n\n  toggleLeftBorder(): void {\n    this.leftBorder.closed = !this.leftBorder.closed;\n    this.leftBorder.color = this.leftBorder.closed ? colors.border.closed : colors.border.opened;\n  }\n\n  start(): void {\n    clearInterval(this.updateInterval);\n\n    this.chart.init(this.simulatorParams.population);\n\n    // clean simulation states\n    this.persons = [];\n    this.currentFrame = 0;\n\n    // create sick and healthy balls\n    let ballIdx = 0;\n    while (ballIdx < 1) {\n      if (this.randomNumberGenerator) {\n        this.persons.push(new Person(Health.SICK, this.randomNumberGenerator));\n      } else {\n        this.persons.push(new Person(Health.SICK));\n      }\n      ballIdx++;\n    }\n    while (ballIdx < this.simulatorParams.population) {\n      if (this.randomNumberGenerator) {\n        this.persons.push(new Person(Health.HEALTHY, this.randomNumberGenerator));\n      } else {\n        this.persons.push(new Person(Health.HEALTHY));\n      }\n      ballIdx++;\n    }\n\n    // shuffle balls\n    this.shuffleBalls();\n\n    const socialDistancingTotal = Math.floor(this.simulatorParams.population * this.simulatorParams.distancing);\n    // make socialDistancing balls\n    for (let i = 0; i < socialDistancingTotal; i++) {\n      this.persons[i].socialDistancing = true;\n    }\n\n    // start chart\n    // start chart\n    this.chart.start();\n\n    // set interval\n    this.updateInterval = setInterval(\n      () => this.update(this.simulatorParams.infectionRate, this.simulatorParams.deathRate),\n      updateIntervallMs\n    );\n  }\n\n  private shuffleBalls(): void {\n    // Fisher–Yates shuffle (https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n    for (let i = 0; i < this.persons.length; i++) {\n      const rand = Math.floor((this.randomNumberGenerator ? this.randomNumberGenerator() : Math.random()) * this.persons.length);\n      const temp = this.persons[i];\n      this.persons[i] = this.persons[rand];\n      this.persons[rand] = temp;\n    }\n  }\n\n  private update(infectionRate: number, deathrate: number): void {\n    // This O(N^2) method could be faster using\n    // Binary Space Partitioning (https://en.wikipedia.org/wiki/Binary_space_partitioning)\n    // or Quadtrees (https://en.wikipedia.org/wiki/Quadtree)\n    for (let i = 0; i < this.persons.length; i++) {\n      for (let j = i + 1; j < this.persons.length; j++) {\n        // check collision and update states, positions & velocities\n        this.persons[i].ballsCollision(this.persons[j], infectionRate);\n      }\n    }\n\n    const statsData = {[Health.SICK]: 0, [Health.HEALTHY]: 0, [Health.RECOVERED]: 0, [Health.DEAD]: 0};\n    this.persons.forEach(person => {\n      // count stats\n      statsData[person.health]++;\n\n      // update ball positions & velocities\n      person.move();\n      person.checkHealth(deathrate);\n\n      // check canvas boundaries collision\n      person.canvasBoundariesCollision();\n\n      // check borders collision\n      person.bordersCollision(this.leftBorder, this.rightBorder);\n    });\n\n    // update chart\n    this.chart.update(statsData);\n\n    // draw everything\n    this.draw();\n\n    // stop simulation if needed\n    this.currentFrame++;\n    if (this.currentFrame === TOTAL_FRAMES) {\n      clearInterval(this.updateInterval);\n      window.addEventListener('resize', () => this.resizeEventHandler());\n      this.simulationEnd();\n    }\n  }\n\n  private resizeEventHandler(): void {\n    // this mechanism is to prevent/delay many drawings of the same things when resizing the browser\n    clearTimeout(this.resizeTimeout);\n    this.resizeTimeout = setTimeout(() => {\n      this.draw();\n    }, updateIntervallMs);\n  }\n\n  private draw(): void {\n    const dimensions = this.drawOutline();\n\n    // draw dead balls (they should be under all other balls in the canvas)\n    for (let i = 0; i < this.persons.length; i++) {\n      if (this.persons[i].health === Health.DEAD) {\n        this.drawBall(this.persons[i], dimensions.scaleWidthRatio);\n      }\n    }\n    // draw other balls\n    for (let i = 0; i < this.persons.length; i++) {\n      if (this.persons[i].health !== Health.DEAD) {\n        this.drawBall(this.persons[i], dimensions.scaleWidthRatio);\n      }\n    }\n\n    // draw chart\n    this.chart.draw();\n  }\n\n  private drawOutline(): { width: number, height: number, scaleWidthRatio: number } {\n    const dimensions = {\n      width: this.canvasContainer.nativeElement.offsetWidth,\n      height: this.canvasContainer.nativeElement.offsetHeight,\n      scaleWidthRatio: this.canvas.nativeElement.offsetWidth / WIDTH\n    };\n\n    // update dimensions and clear canvas\n    // the canvas is cleared when a new value is attached to dimensions (no matter if a same value)\n    this.canvas.nativeElement.width = dimensions.width;\n    this.canvas.nativeElement.height = dimensions.height;\n    dimensions.scaleWidthRatio = this.canvas.nativeElement.offsetWidth / WIDTH;\n\n    // draw borders\n    this.drawBorder(this.leftBorder, dimensions);\n    this.drawBorder(this.rightBorder, dimensions);\n\n    // draw canvas boundaries\n    this.drawCanvasBoundaries(dimensions);\n    return dimensions;\n  }\n\n  private drawLine(color: string, position: number, dimensions: { width: number, height: number, scaleWidthRatio: number }): void {\n    const scaledPosition = position * dimensions.scaleWidthRatio;\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(scaledPosition, 0);\n    this.ctx.lineTo(scaledPosition, dimensions.height);\n    this.ctx.closePath();\n\n    this.ctx.strokeStyle = color;\n    this.ctx.stroke();\n  }\n\n  private drawBorder(border: Border, dimensions: { width: number, height: number, scaleWidthRatio: number }): void {\n    this.drawLine(border.color, border.leftWall, dimensions);\n    this.drawLine(border.color, border.rightWall, dimensions);\n  }\n\n  private drawCanvasBoundaries(dimensions: { width: number, height: number, scaleWidthRatio: number }): void {\n    this.ctx.strokeStyle = colors.canvasBoundary;\n    this.ctx.strokeRect(0, 0, dimensions.width, dimensions.height);\n  }\n\n  private drawBall(ball: Person, scaleWidthRatio: number): void {\n    const scaledX = ball.position.x * scaleWidthRatio;\n    const scaledY = ball.position.y * scaleWidthRatio;\n    const scaledRadius = PERSON_RADIUS * scaleWidthRatio;\n\n    this.ctx.beginPath();\n    this.ctx.arc(scaledX, scaledY, scaledRadius, 0, FULL_ANGLE);\n    this.ctx.closePath();\n\n    this.ctx.fillStyle = colors.states[ball.health];\n    this.ctx.fill();\n  }\n\n  private simulationEnd(): void {\n    // hide(borderBtnsContainer);\n    // show(simulationEndBtnsContainer);\n  }\n}\n","<div class=\"flex\">\n  <div class=\"param-container\">\n    <cosi-params [initialParams]=\"mainParams\" (paramsChanged)=\"changeMainParams($event)\"></cosi-params>\n    <div class=\"flex column\">\n      <button class=\"start-button\" (click)=\"start(simulator1)\">(Re)Start simulation</button>\n      <button class=\"secondary-button\" (click)=\"show2nd(simulator2)\">Toggle second simulation</button>\n    </div>\n  </div>\n  <div #simulator1 tabindex=\"1\">\n    <cosi-simulation [simulatorParams]=\"mainParams\"\n                     [randomNumberGenerator]=\"rng1\">\n    </cosi-simulation>\n  </div>\n</div>\n<div class=\"flex\" #simulator2 tabindex=\"1\">\n  <ng-container *ngIf=\"is2ndVisible\">\n    <div class=\"param-container\">\n      <cosi-params [initialParams]=\"secondParams\" (paramsChanged)=\"changeSecondParams($event)\"></cosi-params>\n      <div class=\"flex column\">\n        <button class=\"start-button\" (click)=\"start(simulator1)\">(Re)Start simulation</button>\n      </div>\n    </div>\n    <div>\n      <cosi-simulation [simulatorParams]=\"secondParams\"\n                       [randomNumberGenerator]=\"rng2\">\n      </cosi-simulation>\n    </div>\n  </ng-container>\n</div>\n\n","<div>\n  <div class=\"button-container\">\n    <button class=\"secondary-button\" (click)=\"toggleLeftBorder()\">Border Left</button>\n    <button class=\"secondary-button\" (click)=\"toggleRightBorder()\">Border Right</button>\n  </div>\n  <div #container id=\"simulation-dimensions\" class=\"simulation-container\">\n    <canvas #canvasElement></canvas>\n  </div>\n  <cosi-chart></cosi-chart>\n</div>\n","import { ApplicationRef, Component, ViewChildren } from '@angular/core';\n\nimport seedrandom from 'seedrandom';\nimport { DEATH_RATE, INFECTION_RATE } from './models/constants';\nimport { SimulatorParams } from './models/simulator-params';\nimport { SimulationComponent } from './simulation/simulation.component';\n\n@Component({\n  selector: 'cosi-simulator',\n  templateUrl: './simulator.component.html',\n  styleUrls: ['./simulator.component.scss']\n})\nexport class SimulatorComponent {\n\n  @ViewChildren(SimulationComponent) charts: SimulationComponent[];\n\n  randomSeed = Math.random();\n  rng1 = seedrandom(this.randomSeed);\n  rng2 = seedrandom(this.randomSeed);\n  is2ndVisible: boolean;\n  private readonly initialState = {\n    population: 200,\n    distancing: 0,\n    deathRate: DEATH_RATE,\n    infectionRate: INFECTION_RATE\n  };\n  mainParams: SimulatorParams = this.initialState;\n  secondParams: SimulatorParams = this.initialState;\n\n  constructor(private appRef: ApplicationRef) {\n  }\n\n  start(simulator1: HTMLDivElement): void {\n    this.randomSeed = Math.random();\n    this.rng1 = seedrandom(this.randomSeed);\n    this.rng2 = seedrandom(this.randomSeed);\n    this.charts.forEach(chart => chart.start());\n    simulator1.scrollIntoView();\n    this.appRef.tick();\n  }\n\n  show2nd(simulator2: HTMLDivElement): void {\n    this.is2ndVisible = !this.is2ndVisible;\n    if (this.is2ndVisible) {\n      simulator2.scrollIntoView({block: 'center'});\n    }\n    this.appRef.tick();\n  }\n\n  changeMainParams($event: SimulatorParams) {\n    this.mainParams = $event;\n    this.appRef.tick();\n  }\n\n  changeSecondParams($event: SimulatorParams) {\n    this.secondParams = $event;\n    this.appRef.tick();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ChartComponent } from './chart/chart.component';\nimport { ParamsComponent } from './params/params.component';\nimport { SimulationComponent } from './simulation/simulation.component';\nimport { SimulatorComponent } from './simulator.component';\n\n\n@NgModule({\n  declarations: [\n    ParamsComponent,\n    SimulatorComponent,\n    ChartComponent,\n    SimulationComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule\n  ],\n  exports: [SimulatorComponent]\n})\nexport class PandemicSimulatorLibModule {\n}\n"]}