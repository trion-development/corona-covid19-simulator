export class Vector2D {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
    static random(randomNumberGenerator) {
        // static function for a random vector
        if (randomNumberGenerator) {
            return new Vector2D(randomNumberGenerator(), randomNumberGenerator());
        }
        return new Vector2D(Math.random(), Math.random());
    }
    set(v) {
        this.x = v.x;
        this.y = v.y;
        return this;
    }
    add(v) {
        // add 'v' to this vector
        this.x += v.x;
        this.y += v.y;
        return this;
    }
    sub(v) {
        // substract 'v' from this vector (direction from this to 'v' vector)
        this.x -= v.x;
        this.y -= v.y;
        return this;
    }
    mult(factor) {
        // multiply this vector by constant 'factor'
        this.x *= factor;
        this.y *= factor;
        return this;
    }
    div(factor) {
        // divide this vector by constant 'factor'
        if (!factor) {
            return new Vector2D(0, 0);
        }
        this.x /= factor;
        this.y /= factor;
        return this;
    }
    normalize() {
        // convert to unit vector, vector with length of 1 (distance between origin and this vector)
        // NOTE: unsafe normalize (if length is zero)!
        return this.div(this.length());
    }
    length() {
        // lenght of this vector (Pythagorean theorem)
        return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    dot(v) {
        // dot product between this and 'v' vector
        return this.x * v.x + this.y * v.y;
    }
    negate() {
        // opposite from this vector
        return new Vector2D(-this.x, -this.y);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVjdG9yMmQuanMiLCJzb3VyY2VSb290IjoiL2dpdGh1Yi93b3Jrc3BhY2UvcHJvamVjdHMvcGFuZGVtaWMtc2ltdWxhdG9yLWxpYi9zcmMvIiwic291cmNlcyI6WyJsaWIvbW9kZWxzL3ZlY3RvcjJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxRQUFRO0lBQ25CLFlBQW1CLENBQVMsRUFBUyxDQUFTO1FBQTNCLE1BQUMsR0FBRCxDQUFDLENBQVE7UUFBUyxNQUFDLEdBQUQsQ0FBQyxDQUFRO0lBQzlDLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLHFCQUFpRDtRQUM3RCxzQ0FBc0M7UUFDdEMsSUFBSSxxQkFBcUIsRUFBRTtZQUN6QixPQUFPLElBQUksUUFBUSxDQUFDLHFCQUFxQixFQUFFLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZFO1FBQ0QsT0FBTyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELEdBQUcsQ0FBQyxDQUFXO1FBQ2IsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsR0FBRyxDQUFDLENBQVc7UUFDYix5QkFBeUI7UUFDekIsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsR0FBRyxDQUFDLENBQVc7UUFDYixxRUFBcUU7UUFDckUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSSxDQUFDLE1BQWM7UUFDakIsNENBQTRDO1FBQzVDLElBQUksQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDO1FBQ2pCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELEdBQUcsQ0FBQyxNQUFjO1FBQ2hCLDBDQUEwQztRQUMxQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsT0FBTyxJQUFJLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDM0I7UUFDRCxJQUFJLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQztRQUNqQixJQUFJLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQztRQUNqQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxTQUFTO1FBQ1AsNEZBQTRGO1FBQzVGLDhDQUE4QztRQUM5QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELE1BQU07UUFDSiw4Q0FBOEM7UUFDOUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsR0FBRyxDQUFDLENBQVc7UUFDYiwwQ0FBMEM7UUFDMUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxNQUFNO1FBQ0osNEJBQTRCO1FBQzVCLE9BQU8sSUFBSSxRQUFRLENBQ2pCLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDUCxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ1IsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBWZWN0b3IyRCB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB4OiBudW1iZXIsIHB1YmxpYyB5OiBudW1iZXIpIHtcbiAgfVxuXG4gIHN0YXRpYyByYW5kb20ocmFuZG9tTnVtYmVyR2VuZXJhdG9yOiAoKCkgPT4gbnVtYmVyKSB8IHVuZGVmaW5lZCk6IFZlY3RvcjJEIHtcbiAgICAvLyBzdGF0aWMgZnVuY3Rpb24gZm9yIGEgcmFuZG9tIHZlY3RvclxuICAgIGlmIChyYW5kb21OdW1iZXJHZW5lcmF0b3IpIHtcbiAgICAgIHJldHVybiBuZXcgVmVjdG9yMkQocmFuZG9tTnVtYmVyR2VuZXJhdG9yKCksIHJhbmRvbU51bWJlckdlbmVyYXRvcigpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyRChNYXRoLnJhbmRvbSgpLCBNYXRoLnJhbmRvbSgpKTtcbiAgfVxuXG4gIHNldCh2OiBWZWN0b3IyRCk6IFZlY3RvcjJEIHtcbiAgICB0aGlzLnggPSB2Lng7XG4gICAgdGhpcy55ID0gdi55O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYWRkKHY6IFZlY3RvcjJEKTogVmVjdG9yMkQge1xuICAgIC8vIGFkZCAndicgdG8gdGhpcyB2ZWN0b3JcbiAgICB0aGlzLnggKz0gdi54O1xuICAgIHRoaXMueSArPSB2Lnk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzdWIodjogVmVjdG9yMkQpOiBWZWN0b3IyRCB7XG4gICAgLy8gc3Vic3RyYWN0ICd2JyBmcm9tIHRoaXMgdmVjdG9yIChkaXJlY3Rpb24gZnJvbSB0aGlzIHRvICd2JyB2ZWN0b3IpXG4gICAgdGhpcy54IC09IHYueDtcbiAgICB0aGlzLnkgLT0gdi55O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbXVsdChmYWN0b3I6IG51bWJlcik6IFZlY3RvcjJEIHtcbiAgICAvLyBtdWx0aXBseSB0aGlzIHZlY3RvciBieSBjb25zdGFudCAnZmFjdG9yJ1xuICAgIHRoaXMueCAqPSBmYWN0b3I7XG4gICAgdGhpcy55ICo9IGZhY3RvcjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGRpdihmYWN0b3I6IG51bWJlcik6IFZlY3RvcjJEIHtcbiAgICAvLyBkaXZpZGUgdGhpcyB2ZWN0b3IgYnkgY29uc3RhbnQgJ2ZhY3RvcidcbiAgICBpZiAoIWZhY3Rvcikge1xuICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyRCgwLCAwKTtcbiAgICB9XG4gICAgdGhpcy54IC89IGZhY3RvcjtcbiAgICB0aGlzLnkgLz0gZmFjdG9yO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbm9ybWFsaXplKCk6IFZlY3RvcjJEIHtcbiAgICAvLyBjb252ZXJ0IHRvIHVuaXQgdmVjdG9yLCB2ZWN0b3Igd2l0aCBsZW5ndGggb2YgMSAoZGlzdGFuY2UgYmV0d2VlbiBvcmlnaW4gYW5kIHRoaXMgdmVjdG9yKVxuICAgIC8vIE5PVEU6IHVuc2FmZSBub3JtYWxpemUgKGlmIGxlbmd0aCBpcyB6ZXJvKSFcbiAgICByZXR1cm4gdGhpcy5kaXYodGhpcy5sZW5ndGgoKSk7XG4gIH1cblxuICBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICAvLyBsZW5naHQgb2YgdGhpcyB2ZWN0b3IgKFB5dGhhZ29yZWFuIHRoZW9yZW0pXG4gICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkpO1xuICB9XG5cbiAgZG90KHY6IFZlY3RvcjJEKTogbnVtYmVyIHtcbiAgICAvLyBkb3QgcHJvZHVjdCBiZXR3ZWVuIHRoaXMgYW5kICd2JyB2ZWN0b3JcbiAgICByZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55O1xuICB9XG5cbiAgbmVnYXRlKCk6IFZlY3RvcjJEIHtcbiAgICAvLyBvcHBvc2l0ZSBmcm9tIHRoaXMgdmVjdG9yXG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyRChcbiAgICAgIC10aGlzLngsXG4gICAgICAtdGhpcy55XG4gICAgKTtcbiAgfVxufVxuIl19