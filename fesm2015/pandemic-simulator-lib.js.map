{"version":3,"file":"pandemic-simulator-lib.js","sources":["ng://pandemic-simulator-lib/lib/models/health.enum.ts","ng://pandemic-simulator-lib/lib/models/constants.ts","ng://pandemic-simulator-lib/lib/chart/chart.component.ts","ng://pandemic-simulator-lib/lib/chart/chart.component.html","ng://pandemic-simulator-lib/lib/params/params.component.ts","ng://pandemic-simulator-lib/lib/params/params.component.html","ng://pandemic-simulator-lib/lib/models/vector2d.ts","ng://pandemic-simulator-lib/lib/models/person.ts","ng://pandemic-simulator-lib/lib/simulation/simulation.component.ts","ng://pandemic-simulator-lib/lib/simulation/simulation.component.html","ng://pandemic-simulator-lib/lib/simulator.component.html","ng://pandemic-simulator-lib/lib/simulator.component.ts","ng://pandemic-simulator-lib/lib/pandemic-simulator-lib.module.ts","ng://pandemic-simulator-lib/public-api.ts","ng://pandemic-simulator-lib/pandemic-simulator-lib.ts"],"sourcesContent":["export enum Health {\n  SICK,\n  HEALTHY,\n  RECOVERED,\n  DEAD\n}\n","import { Border } from './border';\nimport { Health } from './health.enum';\n\nexport const fps = 60; // Note: if you change this, you'll need to addapt ball speed\nexport const updateIntervallMs = 1000 / fps;\nexport const simulationSeconds = 30; // the simulation lasts 30 seconds\nexport const TOTAL_FRAMES = fps * simulationSeconds;\nexport const safeLimitPercentage = 0.3; // that's 30 percents capacity\nexport const chartSafeLimit = 1 - safeLimitPercentage;\n\n// loval units\nexport const WIDTH = 100;\nexport const HEIGHT = 100 * 2 / 3; // the canvas ratio is always 3:2\nexport const PERSON_RADIUS = 0.8;\nexport const PERSON_SPEED = 0.2;\nexport const PERSON_GAP = 0.001; // a small value used to create gaps between balls\nexport const FULL_ANGLE = 2 * Math.PI;\nexport const borderWidth = 1;\n\nexport const oneThirdWidth = WIDTH / 3;\nexport const twoThirdsWidth = 2 * oneThirdWidth;\nexport const borderWidthHalf = borderWidth / 2;\n\n// colors\nexport const blackColor = '#000000';\nexport const lightGrayColor = '#EEEEEE';\nexport const healthyColor = '#a6db68';\nexport const sickColor = '#E53935';\nexport const recoveredColor = '#69a7db';\nexport const dangerSickColor = '#B71C1C';\n\nexport const colors = {\n  border: {\n    opened: lightGrayColor,\n    closed: blackColor\n  },\n  states: {\n    [Health.HEALTHY]: healthyColor,\n    [Health.SICK]: sickColor,\n    [Health.RECOVERED]: recoveredColor,\n    [Health.DEAD]: blackColor\n  },\n  chart: {\n    healthy: healthyColor,\n    safeSick: sickColor,\n    dangerSick: dangerSickColor,\n    recovered: recoveredColor,\n    dead: blackColor,\n    empty: lightGrayColor,\n    safeLine: lightGrayColor\n  },\n  canvasBoundary: blackColor\n};\n\n\nexport const INFECTION_RATE = 1;\nexport const DEATH_RATE = 0.03;\n\nexport const sicknessInterval = {\n  from: 6 * fps,\n  to: 8 * fps\n};\n","import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';\nimport { chartSafeLimit, colors, TOTAL_FRAMES } from '../models/constants';\nimport { Health } from '../models/health.enum';\n\n@Component({\n  selector: 'cosi-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.scss']\n})\nexport class ChartComponent implements AfterViewInit {\n\n  @ViewChild('canvasElement') chartCanvas: ElementRef<HTMLCanvasElement>;\n  @ViewChild('container') containerElement: ElementRef<HTMLElement>;\n\n  deadAbsolute: number;\n  recoveredAbsolute: number;\n  sickAbsolute: number;\n  healthyAbsolute: number;\n\n  private currentStep: number;\n  private dangerSick: number[];\n  // private safeSick: number[];\n  private healthy: number[];\n  private recovered: number[];\n  private context: CanvasRenderingContext2D;\n  private maxValue: number;\n\n  constructor(private cdRef: ChangeDetectorRef) {\n  }\n\n  ngAfterViewInit(): void {\n    const ctx = this.chartCanvas.nativeElement.getContext('2d');\n    if (ctx) {\n      this.context = ctx;\n    }\n  }\n\n  init(value: number): void {\n    // init parameters\n    this.maxValue = value;\n  }\n\n  start(): void {\n    // clean chart states\n    this.dangerSick = [];\n    // this.safeSick = [];\n    this.healthy = [];\n    this.recovered = [];\n    this.currentStep = 0;\n  }\n\n  update(data: { [K in Health]: number }): void {\n    // save the values as percentages\n    this.deadAbsolute = data[Health.DEAD];\n    this.recoveredAbsolute = data[Health.RECOVERED];\n    this.sickAbsolute = data[Health.SICK];\n    this.healthyAbsolute = data[Health.HEALTHY];\n    this.cdRef.detectChanges();\n\n    let sickValue = this.maxValue - data[Health.SICK];\n    let healthyValue = sickValue - data[Health.HEALTHY];\n    let recoveredValue = healthyValue - data[Health.RECOVERED];\n    sickValue /= this.maxValue;\n    healthyValue /= this.maxValue;\n    recoveredValue /= this.maxValue;\n\n    this.dangerSick.push(sickValue);\n    // this.safeSick.push(Math.max(sickValue, chartSafeLimit));\n    this.healthy.push(healthyValue);\n    this.recovered.push(recoveredValue);\n  }\n\n  draw(): void {\n    // The chart canvas width and height can be found using offsetWidth and offsetHeight\n    const width = this.containerElement.nativeElement.offsetWidth;\n    const height = this.containerElement.nativeElement.offsetHeight;\n    const stepSize = width / (TOTAL_FRAMES - 1); // minus the first frame/result, because that's the start of the chart\n    const currentStepSize = this.currentStep * stepSize;\n\n    // update dimensions and clear canvas\n    // the canvas is cleared when a new value is attached to dimensions (no matter if a same value)\n    this.chartCanvas.nativeElement.width = width;\n    this.chartCanvas.nativeElement.height = height;\n\n    // draw empty rect (the upcoming time)\n    this.drawRect(colors.chart.empty, currentStepSize, 0, width - currentStepSize, height);\n\n    // draw dead part (a whole rectangle, the elapsed time)\n    this.drawRect(colors.chart.dead, 0, 0, currentStepSize, height);\n\n    // draw recovered part\n    this.drawPolygon(this.recovered, colors.chart.recovered, height, stepSize);\n\n    // draw healthy part\n    this.drawPolygon(this.healthy, colors.chart.healthy, height, stepSize);\n\n    // draw danger sick part\n    this.drawPolygon(this.dangerSick, colors.chart.dangerSick, height, stepSize);\n\n    // draw \"safe\" sick part\n    // this.drawPolygon(this.safeSick, colors.chart.safeSick, height, stepSize);\n\n    // draw \"safe\" line\n    // this.drawLine(height * chartSafeLimit, 0, currentStepSize);\n\n    this.currentStep++;\n  }\n\n  private drawLine(height: number, from: number, to: number): void {\n    this.context.beginPath();\n    this.context.moveTo(from, height);\n    this.context.lineTo(to, height);\n    this.context.closePath();\n\n    this.context.strokeStyle = colors.chart.safeLine;\n    this.context.stroke();\n  }\n\n  private drawRect(color: string, x: number, y: number, width: number, height: number): void {\n    this.context.fillStyle = color;\n    this.context.fillRect(x, y, width, height);\n  }\n\n  private drawPolygon(data: number[], color: string, height: number, stepSize: number): void {\n    this.context.beginPath();\n    this.context.moveTo(0, height);\n\n    let step = -stepSize;\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < data.length; i++) {\n      step += stepSize;\n      this.context.lineTo(step, data[i] * height);\n    }\n\n    this.context.lineTo(step, height);\n    this.context.closePath();\n\n    this.context.fillStyle = color;\n    this.context.fill();\n  }\n\n  private clear(): void {\n    // clear canvas\n    this.chartCanvas.nativeElement.width = this.chartCanvas.nativeElement.height = 0;\n  }\n\n}\n","<div id=\"chart-stats\">\n  <span class=\"border-on-right\">\n    Healthy\n    <span id=\"healthy-number\" class=\"number\">{{healthyAbsolute}}</span>\n  </span>\n  <span class=\"border-on-right\">\n    Sick\n    <span id=\"sick-number\" class=\"number\">{{sickAbsolute}}</span>\n  </span>\n  <span class=\"border-on-right\">\n    Recovered\n    <span id=\"recovered-number\" class=\"number\">{{recoveredAbsolute}}</span>\n  </span>\n  <span>\n    Dead\n    <span id=\"dead-number\" class=\"number\">{{deadAbsolute}}</span>\n  </span>\n</div>\n\n<div #container class=\"chart-container\">\n  <canvas #canvasElement></canvas>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { SimulatorParams } from '../models/simulator-params';\n\n@Component({\n  selector: 'cosi-params',\n  templateUrl: './params.component.html',\n  styleUrls: ['./params.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ParamsComponent implements OnInit, OnDestroy {\n\n  @Input() initialParams: SimulatorParams;\n  @Output() paramsChanged = new EventEmitter<SimulatorParams>();\n\n  paramsForm = new FormGroup({\n    population: new FormControl(),\n    distancing: new FormControl(),\n    infectionRate: new FormControl(),\n    deathRate: new FormControl()\n  });\n  private paramsSubs: Subscription;\n\n  ngOnInit(): void {\n    if (this.initialParams) {\n      this.paramsForm.setValue(\n        {\n          population: this.initialParams.population,\n          distancing: this.initialParams.distancing * 100,\n          deathRate: this.initialParams.deathRate * 100,\n          infectionRate: this.initialParams.infectionRate * 100\n        },\n        {emitEvent: false}\n      );\n    }\n    this.paramsSubs = this.paramsForm.valueChanges\n      .subscribe(val => {\n        const params = {\n          population: val.population,\n          distancing: val.distancing / 100,\n          deathRate: val.deathRate / 100,\n          infectionRate: val.infectionRate / 100\n        };\n        this.paramsChanged.emit(params);\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.paramsSubs.unsubscribe();\n  }\n}\n","<form [formGroup]=\"paramsForm\">\n  <div>\n    <label for=\"population\">Population </label>\n    <input id=\"population\" type=\"range\" min=\"100\" max=\"500\" formControlName=\"population\">\n  </div>\n  <div>\n    <label for=\"distancing\">Social Distancing </label>\n    <input id=\"distancing\" type=\"range\" min=\"0\" max=\"100\" formControlName=\"distancing\">\n  </div>\n  <div>\n    <label for=\"deathRate\">Death Rate </label>\n    <input id=\"deathRate\" type=\"range\" min=\"0\" max=\"100\" formControlName=\"deathRate\">\n  </div>\n  <div>\n    <label for=\"infectionRate\">Infection Rate </label>\n    <input id=\"infectionRate\" type=\"range\" min=\"0\" max=\"100\" formControlName=\"infectionRate\">\n  </div>\n</form>\n","export class Vector2D {\n  constructor(public x: number, public y: number) {\n  }\n\n  static random(randomNumberGenerator: (() => number) | undefined): Vector2D {\n    // static function for a random vector\n    if (randomNumberGenerator) {\n      return new Vector2D(randomNumberGenerator(), randomNumberGenerator());\n    }\n    return new Vector2D(Math.random(), Math.random());\n  }\n\n  set(v: Vector2D): Vector2D {\n    this.x = v.x;\n    this.y = v.y;\n    return this;\n  }\n\n  add(v: Vector2D): Vector2D {\n    // add 'v' to this vector\n    this.x += v.x;\n    this.y += v.y;\n    return this;\n  }\n\n  sub(v: Vector2D): Vector2D {\n    // substract 'v' from this vector (direction from this to 'v' vector)\n    this.x -= v.x;\n    this.y -= v.y;\n    return this;\n  }\n\n  mult(factor: number): Vector2D {\n    // multiply this vector by constant 'factor'\n    this.x *= factor;\n    this.y *= factor;\n    return this;\n  }\n\n  div(factor: number): Vector2D {\n    // divide this vector by constant 'factor'\n    if (!factor) {\n      return new Vector2D(0, 0);\n    }\n    this.x /= factor;\n    this.y /= factor;\n    return this;\n  }\n\n  normalize(): Vector2D {\n    // convert to unit vector, vector with length of 1 (distance between origin and this vector)\n    // NOTE: unsafe normalize (if length is zero)!\n    return this.div(this.length());\n  }\n\n  length(): number {\n    // lenght of this vector (Pythagorean theorem)\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  dot(v: Vector2D): number {\n    // dot product between this and 'v' vector\n    return this.x * v.x + this.y * v.y;\n  }\n\n  negate(): Vector2D {\n    // opposite from this vector\n    return new Vector2D(\n      -this.x,\n      -this.y\n    );\n  }\n}\n","import { Border } from './border';\nimport { HEIGHT, PERSON_GAP, PERSON_RADIUS, PERSON_SPEED, sicknessInterval, WIDTH } from './constants';\nimport { Health } from './health.enum';\nimport { Vector2D } from './vector2d';\n\nexport class Person {\n\n  static readonly LEFT_BOUNDARY = PERSON_RADIUS;\n  static readonly RIGHT_BOUNDARY = WIDTH - PERSON_RADIUS;\n  static readonly TOP_BOUNDARY = PERSON_RADIUS;\n  static readonly BOTTOM_BOUNDARY = HEIGHT - PERSON_RADIUS;\n\n  position: Vector2D;\n  socialDistancing: boolean;\n\n\n  private velocity: Vector2D;\n  private timeToRecovery: number;\n\n  private positionDiff = new Vector2D(0, 0);\n  private rng: () => number;\n\n  constructor(public health: Health, randomNumberGenerator?: () => number) {\n    this.rng = randomNumberGenerator || Math.random;\n    this.position = Vector2D.random(this.rng);\n    this.position.x *= WIDTH;\n    this.position.y *= HEIGHT;\n    this.velocity = Person.applySpeed(Vector2D.random(this.rng).sub(new Vector2D(0.5, 0.5)));\n    this.socialDistancing = false;\n    this.timeToRecovery = Math.floor(\n      sicknessInterval.from + this.rng() * (sicknessInterval.to - sicknessInterval.from)\n    );\n  }\n\n  static applySpeed(velocity: Vector2D): Vector2D {\n    return velocity.normalize().mult(PERSON_SPEED);\n  }\n\n  static reflectBall(ball: Person, direction: Vector2D, distanceDiff: number): void {\n    direction.normalize();\n\n    // move the ball outside of collision\n    const diff = distanceDiff + PERSON_GAP / 2;\n    ball.position = ball.position.add(direction.mult(diff));\n\n    direction.normalize();\n    // reflect ball, solution: r=d−2(d*n)n (https://math.stackexchange.com/questions/13261/how-to-get-a-reflection-vector)\n    ball.velocity = ball.velocity.sub(direction.mult(2 * ball.velocity.dot(direction)));\n  }\n\n  static separateBalls(ballA: Person, ballB: Person, positionSub: Vector2D, distanceDiff: number): void {\n    // move balls outside of collision\n    const diff = distanceDiff / 2 + PERSON_GAP;\n    const adjustment = positionSub.normalize().mult(diff);\n    ballA.position = ballA.position.add(adjustment);\n    ballB.position = ballB.position.add(adjustment.negate());\n    positionSub.normalize();\n  }\n\n  static ellasticCollision(ballA: Person, ballB: Person, direction: Vector2D, distance: number): void {\n    // Elastic collision, but the ball speed is reverted after the collision (no energy lost in this case)\n    // The formula can be found here: https://en.wikipedia.org/wiki/Elastic_collision\n    const adjustment = direction.mult(ballA.velocity.sub(ballB.velocity).dot(direction) / (distance * distance));\n    ballA.velocity = Person.applySpeed(ballA.velocity.sub(adjustment));\n    ballB.velocity = Person.applySpeed(ballB.velocity.sub(adjustment.negate()));\n  }\n\n  static borderCollision(border: Border, ball: Person): void {\n    if (!border.closed) {\n      return;\n    }\n\n    if (border.ballLeftPosition <= ball.position.x && border.ballRightPosition >= ball.position.x) {\n      // move ball outside the border\n      ball.position.x = (ball.position.x <= border.position) ?\n        border.ballLeftPosition : border.ballRightPosition;\n\n      // reflect ball\n      ball.velocity.x = -ball.velocity.x;\n    }\n  }\n\n  canvasBoundariesCollision(): void {\n    if (this.position.x <= Person.LEFT_BOUNDARY || this.position.x >= Person.RIGHT_BOUNDARY) {\n      // move ball inside the boundaries\n      this.position.x = (this.position.x <= Person.LEFT_BOUNDARY) ?\n        Person.LEFT_BOUNDARY : Person.RIGHT_BOUNDARY;\n\n      // reflection ball\n      this.velocity.x = -this.velocity.x;\n    }\n    if (this.position.y <= Person.TOP_BOUNDARY || this.position.y >= Person.BOTTOM_BOUNDARY) {\n      // move ball inside the borders\n      this.position.y = (this.position.y <= Person.TOP_BOUNDARY) ?\n        Person.TOP_BOUNDARY : Person.BOTTOM_BOUNDARY;\n\n      // reflection ball\n      this.velocity.y = -this.velocity.y;\n    }\n  }\n\n  bordersCollision(leftBorder: Border, rightBorder: Border): void {\n    Person.borderCollision(leftBorder, this);\n    Person.borderCollision(rightBorder, this);\n  }\n\n  ballsCollision(ball: Person, infectionRate: number): void {\n    if (this.health === Health.DEAD || ball.health === Health.DEAD) {\n      return;\n    }\n    this.positionDiff.set(this.position);\n    this.positionDiff.sub(ball.position);\n    const distance = this.positionDiff.length();\n    const distanceDiff = (2 * PERSON_RADIUS) - distance; // 2* ballradius === minDistance\n\n    if (distanceDiff >= 0) {\n      if (this.socialDistancing) {\n        Person.reflectBall(ball, this.positionDiff.negate(), distanceDiff);\n      } else if (ball.socialDistancing) {\n        Person.reflectBall(this, this.positionDiff, distanceDiff);\n      } else {\n        Person.separateBalls(this, ball, this.positionDiff, distanceDiff);\n\n        if (!ball.socialDistancing || !this.socialDistancing) {\n          Person.ellasticCollision(this, ball, this.positionDiff, distance);\n        }\n      }\n\n      if ((this.health === Health.SICK || ball.health === Health.SICK) &&\n        (this.health === Health.HEALTHY || ball.health === Health.HEALTHY) &&\n        (this.rng() < infectionRate)) {\n        this.health = ball.health = Health.SICK;\n      }   // both will be sick if at least one is infected in the collision\n    }\n  }\n\n  move(): void {\n    if (!this.socialDistancing && this.health !== Health.DEAD)\n      // move the ball using velocities if not social distancing or dead\n    {\n      this.position = this.position.add(this.velocity);\n    }\n  }\n\n  checkHealth(deathRate: number): void {\n    if (this.health === Health.SICK && (--this.timeToRecovery) === 0)\n      // check if this ball is dead or recovered\n    {\n      this.health = (this.rng() < deathRate) ? Health.DEAD : Health.RECOVERED;\n    }\n  }\n}\n","import { AfterViewInit, Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { ChartComponent } from '../chart/chart.component';\nimport { Border } from '../models/border';\nimport {\n  borderWidthHalf,\n  colors,\n  FULL_ANGLE,\n  lightGrayColor,\n  oneThirdWidth,\n  PERSON_RADIUS,\n  TOTAL_FRAMES,\n  twoThirdsWidth,\n  updateIntervallMs,\n  WIDTH\n} from '../models/constants';\nimport { Health } from '../models/health.enum';\nimport { Person } from '../models/person';\nimport { SimulatorParams } from '../models/simulator-params';\n\n@Component({\n  selector: 'cosi-simulation',\n  templateUrl: './simulation.component.html',\n  styleUrls: ['./simulation.component.scss']\n})\nexport class SimulationComponent implements OnInit, AfterViewInit {\n\n  @ViewChild('canvasElement') canvas: ElementRef<HTMLCanvasElement>;\n  @ViewChild('container') canvasContainer: ElementRef<HTMLElement>;\n  @ViewChild(ChartComponent) chart: ChartComponent;\n\n  @Input() simulatorParams: SimulatorParams;\n  @Input() randomNumberGenerator?: () => number;\n\n  private rightBorder: Border = {\n    position: twoThirdsWidth,\n    leftWall: twoThirdsWidth - borderWidthHalf,\n    rightWall: twoThirdsWidth + borderWidthHalf,\n    ballLeftPosition: twoThirdsWidth - borderWidthHalf - PERSON_RADIUS,\n    ballRightPosition: twoThirdsWidth + borderWidthHalf + PERSON_RADIUS,\n    closed: false,\n    color: lightGrayColor\n  };\n  private leftBorder: Border = {\n    position: oneThirdWidth,\n    leftWall: oneThirdWidth - borderWidthHalf,\n    rightWall: oneThirdWidth + borderWidthHalf,\n    ballLeftPosition: oneThirdWidth - borderWidthHalf - PERSON_RADIUS,\n    ballRightPosition: oneThirdWidth + borderWidthHalf + PERSON_RADIUS,\n    closed: false,\n    color: lightGrayColor\n  };\n\n  private ctx: CanvasRenderingContext2D;\n  private persons: Person[] = [];\n  private currentFrame = 0;\n  private updateInterval: number;\n  private resizeTimeout: number;\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    const ctx = this.canvas.nativeElement.getContext('2d');\n    if (ctx) {\n      this.ctx = ctx;\n      this.drawOutline();\n    }\n  }\n\n  toggleRightBorder(): void {\n    this.rightBorder.closed = !this.rightBorder.closed;\n    this.rightBorder.color = this.rightBorder.closed ? colors.border.closed : colors.border.opened;\n  }\n\n  toggleLeftBorder(): void {\n    this.leftBorder.closed = !this.leftBorder.closed;\n    this.leftBorder.color = this.leftBorder.closed ? colors.border.closed : colors.border.opened;\n  }\n\n  start(): void {\n    clearInterval(this.updateInterval);\n\n    this.chart.init(this.simulatorParams.population);\n\n    // clean simulation states\n    this.persons = [];\n    this.currentFrame = 0;\n\n    // create sick and healthy balls\n    let ballIdx = 0;\n    while (ballIdx < 1) {\n      if (this.randomNumberGenerator) {\n        this.persons.push(new Person(Health.SICK, this.randomNumberGenerator));\n      } else {\n        this.persons.push(new Person(Health.SICK));\n      }\n      ballIdx++;\n    }\n    while (ballIdx < this.simulatorParams.population) {\n      if (this.randomNumberGenerator) {\n        this.persons.push(new Person(Health.HEALTHY, this.randomNumberGenerator));\n      } else {\n        this.persons.push(new Person(Health.HEALTHY));\n      }\n      ballIdx++;\n    }\n\n    // shuffle balls\n    this.shuffleBalls();\n\n    const socialDistancingTotal = Math.floor(this.simulatorParams.population * this.simulatorParams.distancing);\n    // make socialDistancing balls\n    for (let i = 0; i < socialDistancingTotal; i++) {\n      this.persons[i].socialDistancing = true;\n    }\n\n    // start chart\n    // start chart\n    this.chart.start();\n\n    // set interval\n    this.updateInterval = setInterval(\n      () => this.update(this.simulatorParams.infectionRate, this.simulatorParams.deathRate),\n      updateIntervallMs\n    );\n  }\n\n  private shuffleBalls(): void {\n    // Fisher–Yates shuffle (https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n    for (let i = 0; i < this.persons.length; i++) {\n      const rand = Math.floor((this.randomNumberGenerator ? this.randomNumberGenerator() : Math.random()) * this.persons.length);\n      const temp = this.persons[i];\n      this.persons[i] = this.persons[rand];\n      this.persons[rand] = temp;\n    }\n  }\n\n  private update(infectionRate: number, deathrate: number): void {\n    // This O(N^2) method could be faster using\n    // Binary Space Partitioning (https://en.wikipedia.org/wiki/Binary_space_partitioning)\n    // or Quadtrees (https://en.wikipedia.org/wiki/Quadtree)\n    for (let i = 0; i < this.persons.length; i++) {\n      for (let j = i + 1; j < this.persons.length; j++) {\n        // check collision and update states, positions & velocities\n        this.persons[i].ballsCollision(this.persons[j], infectionRate);\n      }\n    }\n\n    const statsData = {[Health.SICK]: 0, [Health.HEALTHY]: 0, [Health.RECOVERED]: 0, [Health.DEAD]: 0};\n    this.persons.forEach(person => {\n      // count stats\n      statsData[person.health]++;\n\n      // update ball positions & velocities\n      person.move();\n      person.checkHealth(deathrate);\n\n      // check canvas boundaries collision\n      person.canvasBoundariesCollision();\n\n      // check borders collision\n      person.bordersCollision(this.leftBorder, this.rightBorder);\n    });\n\n    // update chart\n    this.chart.update(statsData);\n\n    // draw everything\n    this.draw();\n\n    // stop simulation if needed\n    this.currentFrame++;\n    if (this.currentFrame === TOTAL_FRAMES) {\n      clearInterval(this.updateInterval);\n      window.addEventListener('resize', () => this.resizeEventHandler());\n      this.simulationEnd();\n    }\n  }\n\n  private resizeEventHandler(): void {\n    // this mechanism is to prevent/delay many drawings of the same things when resizing the browser\n    clearTimeout(this.resizeTimeout);\n    this.resizeTimeout = setTimeout(() => {\n      this.draw();\n    }, updateIntervallMs);\n  }\n\n  private draw(): void {\n    const dimensions = this.drawOutline();\n\n    // draw dead balls (they should be under all other balls in the canvas)\n    for (let i = 0; i < this.persons.length; i++) {\n      if (this.persons[i].health === Health.DEAD) {\n        this.drawBall(this.persons[i], dimensions.scaleWidthRatio);\n      }\n    }\n    // draw other balls\n    for (let i = 0; i < this.persons.length; i++) {\n      if (this.persons[i].health !== Health.DEAD) {\n        this.drawBall(this.persons[i], dimensions.scaleWidthRatio);\n      }\n    }\n\n    // draw chart\n    this.chart.draw();\n  }\n\n  private drawOutline(): { width: number, height: number, scaleWidthRatio: number } {\n    const dimensions = {\n      width: this.canvasContainer.nativeElement.offsetWidth,\n      height: this.canvasContainer.nativeElement.offsetHeight,\n      scaleWidthRatio: this.canvas.nativeElement.offsetWidth / WIDTH\n    };\n\n    // update dimensions and clear canvas\n    // the canvas is cleared when a new value is attached to dimensions (no matter if a same value)\n    this.canvas.nativeElement.width = dimensions.width;\n    this.canvas.nativeElement.height = dimensions.height;\n    dimensions.scaleWidthRatio = this.canvas.nativeElement.offsetWidth / WIDTH;\n\n    // draw borders\n    this.drawBorder(this.leftBorder, dimensions);\n    this.drawBorder(this.rightBorder, dimensions);\n\n    // draw canvas boundaries\n    this.drawCanvasBoundaries(dimensions);\n    return dimensions;\n  }\n\n  private drawLine(color: string, position: number, dimensions: { width: number, height: number, scaleWidthRatio: number }): void {\n    const scaledPosition = position * dimensions.scaleWidthRatio;\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(scaledPosition, 0);\n    this.ctx.lineTo(scaledPosition, dimensions.height);\n    this.ctx.closePath();\n\n    this.ctx.strokeStyle = color;\n    this.ctx.stroke();\n  }\n\n  private drawBorder(border: Border, dimensions: { width: number, height: number, scaleWidthRatio: number }): void {\n    this.drawLine(border.color, border.leftWall, dimensions);\n    this.drawLine(border.color, border.rightWall, dimensions);\n  }\n\n  private drawCanvasBoundaries(dimensions: { width: number, height: number, scaleWidthRatio: number }): void {\n    this.ctx.strokeStyle = colors.canvasBoundary;\n    this.ctx.strokeRect(0, 0, dimensions.width, dimensions.height);\n  }\n\n  private drawBall(ball: Person, scaleWidthRatio: number): void {\n    const scaledX = ball.position.x * scaleWidthRatio;\n    const scaledY = ball.position.y * scaleWidthRatio;\n    const scaledRadius = PERSON_RADIUS * scaleWidthRatio;\n\n    this.ctx.beginPath();\n    this.ctx.arc(scaledX, scaledY, scaledRadius, 0, FULL_ANGLE);\n    this.ctx.closePath();\n\n    this.ctx.fillStyle = colors.states[ball.health];\n    this.ctx.fill();\n  }\n\n  private simulationEnd(): void {\n    // hide(borderBtnsContainer);\n    // show(simulationEndBtnsContainer);\n  }\n}\n","<div>\n  <div class=\"button-container\">\n    <button class=\"secondary-button\" (click)=\"toggleLeftBorder()\">Border Left</button>\n    <button class=\"secondary-button\" (click)=\"toggleRightBorder()\">Border Right</button>\n  </div>\n  <div #container id=\"simulation-dimensions\" class=\"simulation-container\">\n    <canvas #canvasElement></canvas>\n  </div>\n  <cosi-chart></cosi-chart>\n</div>\n","<div class=\"flex\">\n  <div class=\"param-container\">\n    <cosi-params [initialParams]=\"mainParams\" (paramsChanged)=\"changeMainParams($event)\"></cosi-params>\n    <div class=\"flex column\">\n      <button class=\"start-button\" (click)=\"start(simulator1)\">(Re)Start simulation</button>\n      <button class=\"secondary-button\" (click)=\"show2nd(simulator2)\">Toggle second simulation</button>\n    </div>\n  </div>\n  <div #simulator1 tabindex=\"1\">\n    <cosi-simulation [simulatorParams]=\"mainParams\"\n                     [randomNumberGenerator]=\"rng1\">\n    </cosi-simulation>\n  </div>\n</div>\n<div class=\"flex\" #simulator2 tabindex=\"1\">\n  <ng-container *ngIf=\"is2ndVisible\">\n    <div class=\"param-container\">\n      <cosi-params [initialParams]=\"secondParams\" (paramsChanged)=\"changeSecondParams($event)\"></cosi-params>\n      <div class=\"flex column\">\n        <button class=\"start-button\" (click)=\"start(simulator1)\">(Re)Start simulation</button>\n      </div>\n    </div>\n    <div>\n      <cosi-simulation [simulatorParams]=\"secondParams\"\n                       [randomNumberGenerator]=\"rng2\">\n      </cosi-simulation>\n    </div>\n  </ng-container>\n</div>\n\n","import { ApplicationRef, Component, ViewChildren } from '@angular/core';\n\nimport seedrandom from 'seedrandom';\nimport { DEATH_RATE, INFECTION_RATE } from './models/constants';\nimport { SimulatorParams } from './models/simulator-params';\nimport { SimulationComponent } from './simulation/simulation.component';\n\n@Component({\n  selector: 'cosi-simulator',\n  templateUrl: './simulator.component.html',\n  styleUrls: ['./simulator.component.scss']\n})\nexport class SimulatorComponent {\n\n  @ViewChildren(SimulationComponent) charts: SimulationComponent[];\n\n  randomSeed = Math.random();\n  rng1 = seedrandom(this.randomSeed);\n  rng2 = seedrandom(this.randomSeed);\n  is2ndVisible: boolean;\n  private readonly initialState = {\n    population: 200,\n    distancing: 0,\n    deathRate: DEATH_RATE,\n    infectionRate: INFECTION_RATE\n  };\n  mainParams: SimulatorParams = this.initialState;\n  secondParams: SimulatorParams = this.initialState;\n\n  constructor(private appRef: ApplicationRef) {\n  }\n\n  start(simulator1: HTMLDivElement): void {\n    this.randomSeed = Math.random();\n    this.rng1 = seedrandom(this.randomSeed);\n    this.rng2 = seedrandom(this.randomSeed);\n    this.charts.forEach(chart => chart.start());\n    simulator1.scrollIntoView();\n    this.appRef.tick();\n  }\n\n  show2nd(simulator2: HTMLDivElement): void {\n    this.is2ndVisible = !this.is2ndVisible;\n    if (this.is2ndVisible) {\n      simulator2.scrollIntoView({block: 'center'});\n    }\n    this.appRef.tick();\n  }\n\n  changeMainParams($event: SimulatorParams) {\n    this.mainParams = $event;\n    this.appRef.tick();\n  }\n\n  changeSecondParams($event: SimulatorParams) {\n    this.secondParams = $event;\n    this.appRef.tick();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ChartComponent } from './chart/chart.component';\nimport { ParamsComponent } from './params/params.component';\nimport { SimulationComponent } from './simulation/simulation.component';\nimport { SimulatorComponent } from './simulator.component';\n\n\n@NgModule({\n  declarations: [\n    ParamsComponent,\n    SimulatorComponent,\n    ChartComponent,\n    SimulationComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule\n  ],\n  exports: [SimulatorComponent]\n})\nexport class PandemicSimulatorLibModule {\n}\n","/*\n * Public API Surface of pandemic-simulator-lib\n */\n\nexport * from './lib/pandemic-simulator-lib.module';\nexport * from './lib/simulator.component';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵelement","i0.ɵɵadvance","i0.ɵɵtextInterpolate","i0.ɵɵproperty","i0.ɵɵlistener","i0.ɵɵelementContainerStart","i0.ɵɵelementContainerEnd","i0.ɵɵtemplate"],"mappings":"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"}